<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Bluebit.MatrixLibrary</name>
  </assembly>
  <members>
    <member name="T:Bluebit.MatrixLibrary.BalanceType">
      <summary>Indicates how the input matrix should be diagonally scaled and/or permuted to improve the conditioning of its eigenvalues.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.ConcatenateMode">
      <summary>Indicates horizontal or vertical matrix concatenation.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.FactorizationStrategy">
      <summary>Specifies the factorization strategy while solving systems of linear equations.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.FillInReducingMethod">
      <summary>Specifies the fill in reducing ordering method to use while computing a matrix factorization.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.MatrixType">
      <summary>Specifies the type of the matrix.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.NormalizeMode">
      <summary>Indicates the normalization type during matrix columns or rows normalization.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.NormType">
      <summary>Specifies the norm value to be returned by the <strong>Norm</strong> member function.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.SolverStatus">
      <summary>Describes the solver status.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.SortOrder">
      <summary>SortOrder enumeration specifies the order in SortRows,
<see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.Matrix~SortCols">SortCols</see> methods.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.StorageOrder">
      <summary>Specifies how a one-dimensional array will be used to fill the elements of the constructed matrix.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.TransposeMode">
      <summary>Indicates whether the original matrix, the transposed matrix, or the conjugate transpose of the original matrix is used in the computation.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CCholesky">
      <summary>Represents a <strong>Cholesky</strong> factorization of a complex Hermitian positive-definite matrix.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CEigen">
      <summary>
        <para>The CEigen class is used to compute the <strong>eigenvalues</strong> and the left and/or right
<strong>eigenvectors</strong> of a general square complex matrix.</para>
      </summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.Cholesky">
      <summary>Represents a <strong>Cholesky</strong> factorization of a real symmetric positive-definite matrix.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CLQ">
      <summary>Represents an <strong>LQ</strong> factorization of a general complex matrix.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CLU">
      <summary>Represents an <strong>LU</strong> factorization of a general complex matrix.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CMatrix">
      <summary>Represents a matrix having complex numbers as elements.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CQR">
      <summary>Represents a <strong>QR</strong> factorization of a general complex matrix.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CSparseMatrix">
      <summary>Represents a general sparse matrix with <strong>complex</strong> elements.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CSparseSolver">
      <summary>Computes the factorization of a general or symmetric sparse <strong>complex</strong> matrix and uses the factorization to solve a system of
linear equations.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CSVD">
      <summary>Represents the <strong>Singular Value Decomposition</strong> (<strong>SVD</strong>) of a general complex matrix.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CSymEigen">
      <summary>The CSymEigen class is used to compute the <strong>eigenvalues</strong> and optionally
the <strong>eigenvectors</strong> of a complex Hermitian matrix.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.CVector">
      <summary>Represents a vector having complex floating point numbers as elements.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.Eigen">
      <summary>The Eigen class is used to compute the <strong>eigenvalues</strong> and the left and/or right
<strong>eigenvectors</strong> of a general square real matrix.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.IndexOutOfBoundsException">
      <summary>Thrown when an index used in a property or method points to an element not belonging to the matrix or to the vector.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.InvalidSizeException">
      <summary>Thrown when a parameter specifying a dimension of a matrix or a vector is negative or greater than the maximum size defined by the effected
license of the product.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.LQ">
      <summary>Represents an <strong>LQ</strong> factorization of a general real matrix.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.LU">
      <summary>Represents an <strong>LU</strong> factorization of a general real matrix.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.Matrix">
      <summary>Represents a matrix having as elements <strong>double</strong> floating point numbers.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.MatrixException">
      <summary>This is the base class for all exceptions defined in the Bluebit.MatrixLibrary namespace.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.NmlConfiguration">
      <summary>Provides static methods and properties for memory and threading control at runtime.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.NotEnoughMemoryException">
      <summary>Thrown when there is not enough memory to complete an operation.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.NotSquareMatrixException">
      <summary>Thrown when a non-square matrix is passed as a parameter to a method that expects a square matrix.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.OperationFailedException">
      <summary>Thrown when a method fails to complete.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.QR">
      <summary>Represents a <strong>QR</strong> factorization of a general real matrix.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.SingularMatrixException">
      <summary>Thrown when a matrix has found to be singular not allowing the successful completion of a method.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.SizeMismatchException">
      <summary>Thrown when a method expects a matrix or vector of different size.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.SparseMatrix">
      <summary>Represents a general sparse matrix with <strong>real</strong> elements.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.SparseSolver">
      <summary>Computes the factorization of a general or symmetric sparse <strong>real</strong> matrix and uses the factorization to solve a system of linear
equations.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.SparseSVD">
      <summary>Computes singular values and singular vectors of sparse matrices.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.SVD">
      <summary>Represents the <strong>Singular Value Decomposition</strong> (<strong>SVD</strong>) of a general complex matrix.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.SymEigen">
      <summary>The SymEigen class is used to compute the <strong>eigenvalues</strong> and optionally the
<strong>eigenvectors</strong> of a real symmetric matrix.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.Vector">
      <summary>Represents a vector having as elements <strong>double</strong> floating point numbers.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CCholesky.#ctor(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Initializes a new instance of the CCholesky class computing the <strong>Cholesky</strong>
factorization of a complex Hermitian positive-definite matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CCholesky.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CCholesky.Inverse">
      <summary>Returns the inverse of a complex Hermitian positive-definite matrix using its <strong>Cholesky</strong> factorization.</summary>
      <returns>A CMatrix object containing the inverse of the factored matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CCholesky.Solve(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Solves a system of linear equations using the <strong>Cholesky</strong> factorization of a complex Hermitian positive-definite matrix.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The &lt;i&gt;rightHands&lt;/i&gt; parameter does not represent a matrix with the same number of rows as the factored matrix.</exception>
      <returns>A CMatrix object that contains the solution of the system of linear equations.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CCholesky.L">
      <summary>Gets the factor L, the lower triangular part of the <strong>Cholesky</strong> factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CCholesky.Size">
      <summary>Gets the size of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CCholesky.Succeeded">
      <summary>Indicates whether the <strong>Cholesky</strong> factorization succeeded and has reached completion.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CEigen.#ctor">
      <summary>Creates a new instance of the CEigen class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CEigen.#ctor(Bluebit.MatrixLibrary.CMatrix,System.Boolean,System.Boolean,Bluebit.MatrixLibrary.BalanceType)">
      <summary>Creates a new instance of the CEigen class computing the eigenvalues and optionally the
right and/or the left eigenvectors of a general square complex matrix, using the specified type of preliminary matrix balancing.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">&lt;i&gt;matrix&lt;/i&gt; parameter does not represent a square matrix.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CEigen.#ctor(Bluebit.MatrixLibrary.CMatrix,System.Boolean,System.Boolean)">
      <summary>Creates a new instance of the CEigen class computing the eigenvalues and optionally the
right and/or the left eigenvectors of a general square complex matrix, with preliminary matrix balancing.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">&lt;i&gt;matrix&lt;/i&gt; parameter does not represent a square matrix.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CEigen.#ctor(Bluebit.MatrixLibrary.CMatrix,System.Boolean)">
      <summary>Creates a new instance of the CEigen class computing the eigenvalues and optionally the
right eigenvectors of a general square complex matrix, with preliminary matrix balancing.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">&lt;i&gt;matrix&lt;/i&gt; parameter does not represent a square matrix.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CEigen.#ctor(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Creates a new instance of the CEigen class, computing the eigenvalues and the right
eigenvectors of a general square complex matrix, with preliminary matrix balancing.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">&lt;i&gt;matrix&lt;/i&gt; parameter does not represent a square matrix.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CEigen.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CEigen.D">
      <summary>Gets a complex diagonal matrix, containing all the computed eigenvalues in its main diagonal.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CEigen.Eigenvalue(System.Int32)">
      <summary>Gets the specified eigenvalue.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">The specified index is less than zero or greater than n-1 where n is the value returned by the &lt;strong&gt;Size property&lt;/strong&gt; of this class.</exception>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CEigen.Eigenvalues">
      <summary>Returns a vector containing all the computed eigenvalues.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CEigen.Eigenvector(System.Int32)">
      <summary>Gets the specified right eigenvector.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">The specified index parameter is less than zero or greater than n-1 where n is the value returned by the &lt;strong&gt;Size&lt;/strong&gt;  property of this class.</exception>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CEigen.Eigenvectors">
      <summary>Gets the right eigenvectors matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CEigen.LeftEigenvector(System.Int32)">
      <summary>Gets the specified left eigenvector.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">The specified index parameter is less than zero or greater than n-1 where n is the value returned by the &lt;strong&gt;Size&lt;/strong&gt;  property of this class.</exception>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CEigen.LeftEigenvectors">
      <summary>Gets the left eigenvectors matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CEigen.Size">
      <summary>Gets the size of matrix that is represented by this eigen decomposition.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CEigen.Succeeded">
      <summary>Indicates whether the eigenvalues-eigenvectors calculation succeeded to completion.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Cholesky.#ctor(Bluebit.MatrixLibrary.Matrix)">
      <summary>Initializes a new instance of the Cholesky class computing the <strong>Cholesky</strong>
factorization of a real symmetric positive-definite matrix.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">The &lt;i&gt;matrix&lt;/i&gt; parameter does not represent a square matrix.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Cholesky.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Cholesky.Inverse">
      <summary>Returns the inverse of a real symmetric positive-definite matrix using its <strong>Cholesky</strong> factorization.</summary>
      <returns>A Matrix object containing the inverse of the factored matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Cholesky.Solve(Bluebit.MatrixLibrary.Matrix)">
      <summary>Solves a system of linear equations using the <strong>Cholesky</strong> factorization of a real symmetric positive-definite matrix.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The &lt;I&gt;rightHands&lt;/I&gt; parameter does not represent a matrix with the same number of rows as the factored matrix.</exception>
      <returns>A Matrix object that contains the solution of the system of linear equations.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Cholesky.L">
      <summary>Gets the factor L, the lower triangular part of the <strong>Cholesky</strong> factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Cholesky.Size">
      <summary>Gets the size of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Cholesky.Succeeded">
      <summary>Indicates whether the <strong>Cholesky</strong> factorization succeeded and has reached completion.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CLQ.#ctor(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Initializes a new instance of the CLQ class computing the <strong>LQ</strong> factorization of
a general complex matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CLQ.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CLQ.Solve(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Solves an underdetermined system of linear equations using the <strong>LQ</strong> factorization of a complex matrix.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The &lt;I&gt;rightHands&lt;/I&gt; parameter does not represent a matrix with the same number of rows as the factored matrix &lt;BR&gt;or&lt;BR&gt;the number of rows of the factored matrix is greater than the number of its columns (the linear system is overdetermined).</exception>
      <returns>A CMatrix object that contains the solution of the system of linear equations.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLQ.Cols">
      <summary>Gets the number of columns of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLQ.L">
      <summary>Gets the factor <strong>L</strong>, the lower triangular matrix of the <strong>LQ</strong> factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLQ.Q">
      <summary>Gets the factor <strong>Q</strong>, the orthogonal matrix of the <strong>LQ</strong> factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLQ.Rows">
      <summary>Gets the number of rows of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CLU.#ctor(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Initializes a new instance of the CLU class computing the <strong>LU</strong> factorization of
a general complex matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CLU.Determinant">
      <summary>Returns the determinant of a square complex matrix using its <strong>LU</strong> factorization.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">The &lt;strong&gt;LU&lt;/strong&gt; factorization represents a non-square matrix.</exception>
      <returns>A complex value that equals to the determinant of the matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CLU.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CLU.GetPivots">
      <summary>Gets an array of integers containing the pivot indices.</summary>
      <returns>An array of type <strong>integer</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CLU.Inverse">
      <summary>Returns the inverse of a square complex matrix using its <strong>LU</strong> factorization.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">The &lt;strong&gt;LU&lt;/strong&gt; factorization does not represent a square matrix.</exception>
      <exception caption="SingularMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SingularMatrixException">The &lt;strong&gt;LU&lt;/strong&gt; factorization represents a singular matrix whose inverse cannot be calculated.</exception>
      <returns>A CMatrix object containing the inverse of the factored matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CLU.Solve(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Solves a system of linear equations with multiple right hands using the <strong>LU</strong> factorization of a general complex matrix.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">The &lt;strong&gt;LU&lt;/strong&gt; decomposition represents a non-square matrix.</exception>
      <exception caption="SingularMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SingularMatrixException">The &lt;strong&gt;LU&lt;/strong&gt; factorization represents a singular matrix that cannot be used to solve the system of linear equations.</exception>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The &lt;I&gt;rightHands&lt;/I&gt; parameter does not represent a matrix with the same number of rows as the factored matrix.</exception>
      <returns>A CMatrix object that contains the solution of the system of linear equations.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLU.Cols">
      <summary>Gets the number of columns of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLU.IsSingular">
      <summary>Gets a Boolean value indicating whether the <strong>LU</strong> factorization represents a singular matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLU.L">
      <summary>Gets the <strong>L</strong> factor, the lower triangular part of the <strong>LU</strong> factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLU.P">
      <summary>Gets the <strong>P</strong> factor, the permutation matrix of the <strong>LU</strong> factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLU.Rows">
      <summary>Gets the number of rows of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CLU.U">
      <summary>Gets the <strong>U</strong> factor, the upper triangular part of the <strong>LU</strong> factorization.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.#ctor">
      <summary>Initializes a new instance of the CMatrix class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.#ctor(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Initializes a new instance of the CMatrix class and initializes the real and imaginary
parts of its complex elements using the values from two <see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.Matrix">Matrix</see> objects .</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.#ctor(System.Int32,System.Int32,System.Numerics.Complex)">
      <summary>Initializes a new instance of the CMatrix class specifying the number of rows and columns
of the newly created matrix, initializing its diagonal elements to the specified complex value.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the CMatrix class specifying the number of rows and columns
of the newly created matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.#ctor(System.Numerics.Complex[0:,0:],System.Int32,System.Int32)">
      <summary>Initializes a new instance of the CMatrix class using the contents of a
two dimensional <strong>complex</strong> array specifying the size of the newly created matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.#ctor(System.Numerics.Complex[0:,0:])">
      <summary>Initializes a new instance of the CMatrix class using the contents of a
two dimensional <strong>complex</strong> array.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.#ctor(System.Numerics.Complex[],System.Int32,System.Int32)">
      <summary>Initializes a new instance of the CMatrix class using the content of a one-dimensional
array.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.#ctor(System.Numerics.Complex[],System.Int32,System.Int32,Bluebit.MatrixLibrary.StorageOrder)">
      <summary>Initializes a new instance of the CMatrix class using the content of a one-dimensional
array.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.#ctor(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Initializes a new instance of the CMatrix class copying the content of an existing matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.#ctor">
      <summary>Initializes a new instance of the CMatrix class creating a complex 3x3 matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Add(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Adds two matrices.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;A, B&lt;/i&gt; are not of the same size.</exception>
      <returns>A CMatrix object that represents the result of the addition.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Adjoint">
      <summary>Returns the conjugate transpose (adjoint) of the current matrix.</summary>
      <returns>A CMatrix instance that represents the conjugate transpose of the current matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ApplyFunction">
      <summary>Returns a new CMatrix object, whose elements are the result of applying
the specified complex function to the elements of this matrix.</summary>
      <returns>A new CMatrix object, whose elements are the result of applying the specified complex
function to the elements of this matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Clear">
      <summary>Sets the value of all the CMatrix elements to zero.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Clone">
      <summary>Creates a duplicate of this CMatrix object.</summary>
      <returns>A new CMatrix object that contains the same data as this.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ColsDotProduct(System.Int32,System.Int32)">
      <summary>Returns the dot product between two columns of the CMatrix object.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">Any of &lt;i&gt;col1, col2&lt;/i&gt; exceeds matrix size.</exception>
      <returns>A complex that equals to the dot product between two columns of the matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ColSum(System.Int32)">
      <summary>Returns the sum of the elements of the specified column.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;colIndex&lt;/i&gt; exceeds matrix size.</exception>
      <returns>A complex equal to the sum of the specified column.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ColVector(System.Int32)">
      <summary>Returns a new CVector object using the specified matrix column.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;col&lt;/i&gt; exceeds matrix size.</exception>
      <returns>A new CVector object containing the elements of the specified column.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Concatenate">
      <summary>Concatenates matrices.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Conjugate">
      <summary>Returns the conjugate of the current matrix.</summary>
      <returns>A CMatrix object that represents the conjugate of the current matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.DeleteColumn(System.Int32)">
      <summary>Deletes a column of the current matrix.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;column&lt;/i&gt; exceeds matrix size</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.DeleteRow(System.Int32)">
      <summary>Deletes a row of the current matrix.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;row&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Determinant">
      <summary>Returns the value of the computed matrix determinant.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">The current matrix is not square.</exception>
      <returns>A complex value that equals to the matrix determinant.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Diagonal">
      <summary>Returns a CVector object containing the main diagonal of the current matrix.</summary>
      <returns>A CVector object containing the elements of the main diagonal.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Divide">
      <summary>Performs matrix right division.</summary>
      <returns>A CMatrix object that represents the result of the matrix right division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Equals(System.Object)">
      <summary>Returns a value indicating whether this CMatrix object is equal to another matrix.</summary>
      <returns>
        <strong>true</strong> if <em>obj</em> is an instance of the CMatrix class and represents a
matrix that has the same size as this instance and also all the elements of <em>obj</em> are equal to the elements of this instance; <strong>false</strong>
otherwise.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.FillRandom">
      <summary>Fills CMatrix object with random values.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.GetHashCode">
      <summary>Returns a hash code value that represents this object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <strong>ISerializable</strong> interface and returns the data needed to serialize the
CMatrix class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.HadamardProduct(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Returns the Hadamard product of two complex matrices</summary>
      <exception caption="SizeMismatchException Class" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;A, B&lt;/i&gt; are not of the same size.</exception>
      <returns>A CMatrix object that represents the Hadamard product of the two matrices.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.HasINFs">
      <summary>Returns a value indicating whether the current matrix contains any elements that evaluate to <strong>negative</strong> or
<strong>positive</strong><strong>infinity</strong>.</summary>
      <returns>
        <strong>true</strong> if any of the matrix elements evaluates to <strong>negative</strong> or <strong>positive infinity</strong>; otherwise
<strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.HasNaNs">
      <summary>Returns a value indicating whether the current matrix contains any elements that evaluate to <strong>NaN</strong> values.</summary>
      <returns>
        <strong>true</strong> if any of the matrix elements evaluates to a <strong>NaN</strong> value; otherwise <strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Imag">
      <summary>Returns a Matrix object containing the imaginary parts of the
<see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.CMatrix">CMatrix</see> elements.</summary>
      <returns>A Matrix object that contains just the imaginary parts of the
<see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.CMatrix">CMatrix</see> object's elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.InsertColumn(System.Int32)">
      <summary>Inserts a column in the current matrix at the specified position.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;position&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.InsertRow(System.Int32)">
      <summary>Inserts a row in the current matrix at the specified position.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Inverse">
      <summary>Computes the inverse of the complex matrix and returns a reference to it.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">Matrix is not square.</exception>
      <exception caption="SingularMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SingularMatrixException">Matrix is found to be singular.</exception>
      <returns>A CMatrix object representing the inverse of the current matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsEqual">
      <summary>Returns a value indicating whether this instance of the CMatrix object is
equal to another instance within a tolerance.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsFinite">
      <summary>Returns a value indicating whether the current matrix contains any elements that evaluate either to <strong>NaN</strong> value or to a
<strong>negative</strong> or <strong>positive</strong><strong>infinity</strong>.</summary>
      <returns>
        <strong>true</strong> if all elements of the current matrix have a value other <strong>NaN</strong>,
<strong>negative</strong><strong>infinity</strong>, <strong>positive</strong><strong>infinity</strong>; otherwise <strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsHermitian">
      <summary>Returns a value indicating whether this matrix is Hermitian.</summary>
      <returns>
        <strong>true</strong> if matrix is found to be Hermitian; <strong>false</strong> otherwise.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsSymmetric">
      <summary>Returns a value indicating whether this matrix is symmetric.</summary>
      <returns>
        <strong>true</strong> if matrix is found to be a symmetric matrix; <strong>false</strong> otherwise.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.LDivide(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Performs matrix left division.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;I&gt;A, B&lt;/I&gt; do not have the same number of rows.</exception>
      <returns>A CMatrix object that represents the result of the matrix left division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Multiply">
      <summary>Multiplies matrices.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Negate(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Returns the negation of the matrix.</summary>
      <returns>A CMatrix object that represents the negate of the matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Norm(Bluebit.MatrixLibrary.NormType)">
      <summary>Returns the matrix norm.</summary>
      <returns>A complex value representing the specified norm.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.NormalizeCols(Bluebit.MatrixLibrary.NormalizeMode)">
      <summary>
        <para>Normalizes the columns of the current matrix according to the specified mode.</para>
      </summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.NormalizeRows(Bluebit.MatrixLibrary.NormalizeMode)">
      <summary>
        <para>Normalizes the rows of the current matrix according to the specified mode.</para>
      </summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Plus(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Returns a copy of the matrix.</summary>
      <returns>A CMatrix object which is a copy of <em>matrix</em>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.PseudoInverse">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix.</summary>
      <returns>A CMatrix object representing the Moore-Penrose inverse (pseudoinverse) of this matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Rank">
      <summary>Returns the matrix rank.</summary>
      <returns>An <strong>integer</strong> value representing the matrix rank.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Real">
      <summary>Returns a Matrix object containing the real parts of the
<see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.CMatrix">CMatrix</see> elements.</summary>
      <returns>A Matrix object that contains just the real parts of the
<see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.CMatrix">CMatrix</see> object's elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ReorderCols(System.Int32[])">
      <summary>Reorders matrix columns according to the specified order.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ReorderRows(System.Int32[])">
      <summary>Reorders matrix rows according to the specified order.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Resize(System.Int32,System.Int32)">
      <summary>Resizes matrix preserving its content.</summary>
      <exception caption="InvalidSizeException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.InvalidSizeException">Any or &lt;i&gt;rows, cols&lt;/i&gt; parameters is less than 1 or greater than the maximum size allowed by the license of the product.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.RowsDotProduct(System.Int32,System.Int32)">
      <summary>Returns the dot product between two rows of the CMatrix object.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">Any of &lt;i&gt;row1, row2&lt;/i&gt; exceeds matrix size.</exception>
      <returns>A complex that equals to the dot product between two rows of the matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.RowSum(System.Int32)">
      <summary>Returns the sum of the elements of the specified row.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;colIndex&lt;/i&gt; exceeds matrix size.</exception>
      <returns>A complex equal to the sum of the specified row.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.RowVector(System.Int32)">
      <summary>Returns a new CVector object using the specified matrix row.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;row&lt;/i&gt; exceeds matrix size.</exception>
      <returns>A new CVector object containing the elements of the specified row.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetColumn">
      <summary>Sets the elements of a matrix column to specified value(s).</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetRow">
      <summary>Sets the elements of a matrix row to specified value(s).</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Solve(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Solves a system of linear equations.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The &lt;I&gt;rightHands&lt;/I&gt; parameter does not represent a matrix with the same number of rows as the current matrix. </exception>
      <returns>A CMatrix object that contains the solution of the system of linear equations.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a subset of the current matrix.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">Any of &lt;i&gt;startRow, endRow, startCol, endCol&lt;/i&gt; parameters exceeds matrix size.</exception>
      <returns>A CMatrix instance that contains the subset of current matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Subtract(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Subtracts a matrix from another matrix.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;A, B&lt;/i&gt; are not of the same size.</exception>
      <returns>A CMatrix object that represents the result of the subtraction.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SwapCols(System.Int32,System.Int32)">
      <summary>Swaps two matrix columns.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">Any of &lt;i&gt;col1, col2&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SwapRows(System.Int32,System.Int32)">
      <summary>Swaps two matrix rows.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">Any of &lt;i&gt;row1, row2&lt;/i&gt; exceeds matrix size. 
</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Times">
      <summary>Multiplies the current matrix and returns the result.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ToArray">
      <summary>Converts current matrix to an array.</summary>
      <returns>An two-dimensional array of type complex containing the elements of the current matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ToString">
      <summary>Converts this instance of CMatrix to a formatted string using the default values for format
string, separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted <strong>string</strong> containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Trace">
      <summary>Returns the sum of the elements of the main diagonal.</summary>
      <returns>A complex value equal to matrix trace.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Transpose">
      <summary>Returns the transpose of the matrix.</summary>
      <returns>A CMatrix instance that represents the transpose of the current matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction1Cmp)">
      <summary>Returns a new CMatrix object, whose elements are the result of applying the specified
function to the elements of this matrix.</summary>
      <returns>A new CMatrix object with the same size as this matrix, whose elements are the results of
applying the specified <em>function</em> to the elements of this matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction2Cmp,System.Numerics.Complex)">
      <summary>Returns a new CMatrix object, whose elements are the result of applying the specified
function to the elements of this matrix.</summary>
      <returns>A new CMatrix object with the same size as this matrix, whose elements are the results of
applying the specified <em>function</em> to the elements of this matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction1Cmp1Int,System.Int32)">
      <summary>Returns a new CMatrix object, whose elements are the result of applying the specified
function to the elements of this matrix.</summary>
      <returns>A new CMatrix object with the same size as this matrix, whose elements are the results of
applying the specified <em>function</em> to the elements of this matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction1Cmp2Int)">
      <summary>Returns a new CMatrix object, whose elements are the result of applying the specified
function to the elements of this matrix.</summary>
      <returns>A new CMatrix object with the same size as this matrix, whose elements are the results of
applying the specified <em>function</em> to the elements of this matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction2Cmp2Int,System.Numerics.Complex)">
      <summary>Returns a new CMatrix object, whose elements are the result of applying the specified
function to the elements of this matrix.</summary>
      <returns>A new CMatrix object with the same size as this matrix, whose elements are the results of
applying the specified <em>function</em> to the elements of this matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Concatenate(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.ConcatenateMode)">
      <summary>Concatenates two matrices horizontally or vertically.</summary>
      <returns>A CMatrix object representing the concatenation of the two matrices.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Concatenate(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Concatenates two matrices horizontally.</summary>
      <returns>A CMatrix object representing the horizontal concatenation of the two matrices.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Divide(System.Numerics.Complex,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Performs scalar-matrix division.</summary>
      <returns>A CMatrix object that represents the result of the scalar-matrix division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Divide(Bluebit.MatrixLibrary.CMatrix,System.Numerics.Complex)">
      <summary>Performs matrix-scalar division.</summary>
      <returns>A CMatrix object that represents the result of the matrix-scalar division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Divide(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Performs matrix right division</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;I&gt;A, B&lt;/I&gt; do not have the same number of columns.</exception>
      <returns>A CMatrix object that represents the result of the matrix division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.FillRandom">
      <summary>Fills CMatrix object with random values ranging from 0 to 10, rounded to zero decimal
places.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.FillRandom(System.Double,System.Double)">
      <summary>Fills CMatrix object with random values ranging from lower to upper bound, rounded to 0
decimal places.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.FillRandom(System.Double,System.Double,System.Int32)">
      <summary>Fills CMatrix object with random values ranging from lower bound to upper bound, rounded to
the specified number of decimal places.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsEqual(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Returns a value indicating whether this CMatrix is equal to another matrix within a default
tolerance.</summary>
      <returns>
        <strong>true</strong> if <em>matrix</em> has the same size as this instance and its elements are equal with the elements of this instance within
the default tolerance; otherwise <strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsEqual(Bluebit.MatrixLibrary.CMatrix,System.Double)">
      <summary>Returns a value indicating whether this CMatrix is equal to another matrix within the
specified tolerance.</summary>
      <returns>
        <strong>true</strong> if <em>matrix</em> has the same size as this instance and its elements are equal with the elements of this instance within
the specified tolerance; otherwise <strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsHermitian(System.Double)">
      <summary>Returns a value indicating whether this matrix is Hermitian.</summary>
      <returns>
        <strong>true</strong> if matrix is found to be Hermitian; <strong>false</strong> otherwise.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsHermitian">
      <summary>Returns a value indicating whether this matrix is Hermitian.</summary>
      <returns>
        <strong>true</strong> if matrix is found to be Hermitian; <strong>false</strong> otherwise.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsSymmetric(System.Double)">
      <summary>Returns a value indicating whether this matrix is symmetric.</summary>
      <returns>
        <strong>true</strong> if matrix is found to be a symmetric matrix; <strong>false</strong> otherwise.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.IsSymmetric">
      <summary>Returns a value indicating whether this matrix is symmetric.</summary>
      <returns>
        <strong>true</strong> if matrix is found to be a symmetric matrix; <strong>false</strong> otherwise.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Multiply(System.Numerics.Complex,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.CMatrix,System.Numerics.Complex,Bluebit.MatrixLibrary.CMatrix)">
      <summary>
        <para>Computes a scalar-matrix-matrix product and adds the result to a scalar-matrix product. The operation is defined as:</para>
        <para>
          <em>C= alpha * op(A) * op(B) + beta *C</em>
        </para>
      </summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">Thrown when matrix dimensions do not match.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Multiply(System.Numerics.Complex,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CVector,System.Numerics.Complex,Bluebit.MatrixLibrary.CVector)">
      <summary>
        <para>Computes a scalar-matrix-vector product and adds the result to a scalar-vector product. The operation is defined as:</para>
        <para>
          <em>y= alpha * op(A) *x + beta *y</em>
        </para>
      </summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The length of vector &lt;i&gt;x&lt;/i&gt; does not equal to the number of matrix columns &lt;/br&gt;&lt;i&gt;or&lt;/i&gt;&lt;/br&gt; the lenght of vector &lt;i&gt;y&lt;/i&gt; does not equal the number of matrix rows.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Multiply(System.Numerics.Complex,Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix,System.Numerics.Complex,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Computes a scalar-matrix-matrix product and adds the result to a scalar-matrix product.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The inner dimentions of the two matrices do not match.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Multiply(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Multiplies a complex matrix by a real matrix.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The inner dimentions of the two matrices do not match.</exception>
      <returns>A CMatrix object that represents the result of the matrix multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Multiply(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Multiplies two complex matrices.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The inner dimentions of the two matrices do not match.</exception>
      <returns>A CMatrix object that represents the result of the matrix multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Multiply(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Left multiplies a matrix with a vector.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The vector size does not match with the number of the matrix rows.</exception>
      <returns>A CVector that represents the result of the vector-matrix multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Multiply(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CVector)">
      <summary>Multiplies a matrix with a complex vector.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The &lt;i&gt;vector&lt;/i&gt; size does not match with the number of the &lt;i&gt;matrix&lt;/i&gt; columns.</exception>
      <returns>A CMatrix that represents the result of the matrix-vector multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Multiply(Bluebit.MatrixLibrary.CMatrix,System.Numerics.Complex)">
      <summary>Returns the product of a scalar and a complex matrix.</summary>
      <returns>A CMatrix object that represents the <em>matrix</em> - <em>scalar</em> product.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.PseudoInverse">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix.</summary>
      <returns>A CMatrix object representing the Moore-Penrose inverse (pseudoinverse) of this matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.PseudoInverse(System.Double)">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix.</summary>
      <returns>A CMatrix object representing the Moore-Penrose inverse (pseudoinverse) of this matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetColumn(System.Int32,Bluebit.MatrixLibrary.CVector)">
      <summary>Sets all elements of a matrix column using the contents on a vector.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;col&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetColumn(System.Int32,System.Numerics.Complex[])">
      <summary>Sets all elements of a matrix column using the content on an array.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;col&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetColumn(System.Int32,System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Sets all elements of a matrix column to incremental values.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;col&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetColumn(System.Int32,System.Numerics.Complex)">
      <summary>Sets all elements of a matrix column to the specified value.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;col&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetRow(System.Int32,Bluebit.MatrixLibrary.CVector)">
      <summary>Sets all elements of a matrix row using the contents on a vector.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;row&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetRow(System.Int32,System.Numerics.Complex[])">
      <summary>Sets all elements of a matrix row using the content on an array.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;row&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetRow(System.Int32,System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Sets all elements of a matrix row to incremental values.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;row&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.SetRow(System.Int32,System.Numerics.Complex)">
      <summary>Sets all elements of a matrix row to the specified value.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;row&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Times(Bluebit.MatrixLibrary.CMatrix)">
      <summary>
        <para>Multiplies the current matrix by another matrix and returns the result.</para>
      </summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The inner dimentions of the two matrices do not match.</exception>
      <returns>A CMatrix object that represents the result of the multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Times(Bluebit.MatrixLibrary.CVector)">
      <summary>Multiplies the current matrix by a vector and returns the result.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The vector size does not match with the number of the current matrix columns.</exception>
      <returns>A CMatrix that represents the result of the matrix-vector multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.Times(System.Numerics.Complex)">
      <summary>Multiplies the current matrix by a scalar value and returns the result.</summary>
      <returns>A CMatrix object that represents the result of the matrix-scalar multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ToString">
      <summary>Converts this instance of CMatrix to a formatted string using the default values for format
string, separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted <strong>string</strong>containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ToString(System.String)">
      <summary>Converts this instance of CMatrix to a formatted string specifying a format string, and
using the default values for separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted <strong>string</strong> containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ToString(System.String,System.String)">
      <summary>Converts this instance of CMatrix to a formatted string specifying a format string, and a
separator and using the default values for left and right borders and end of line characters.</summary>
      <returns>A formatted <strong>string</strong> containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ToString(System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of CMatrix to a formatted string specifying a format string, a
separator, left and right borders and end of line characters.</summary>
      <returns>A formatted <strong>string</strong> containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ToString(System.IFormatProvider,System.String)">
      <summary>Converts this instance of the <strong>%%ShortParentItemName%%</strong> object to a formatted string specifying culture-specific format
information and a format string.</summary>
      <returns>A formatted <strong>string</strong> containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.ToString(System.IFormatProvider,System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of CMatrix to a formatted string specifying culture-specific format
information, a format string, a separator, left and right borders and end of line characters.</summary>
      <returns>A formatted <strong>string</strong> containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_Addition(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Adds two matrices.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;A, B&lt;/i&gt; are not of the same size.</exception>
      <returns>A CMatrix object that represents the result of the addition.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_Division">
      <summary>Performs matrix right division.</summary>
      <returns>A CMatrix object that represents the result of the matrix right division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_Equality(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Tests whether two CMatrix objects represent equal matrices.</summary>
      <returns>
        <strong>true</strong> if matrices are equal; otherwise <strong>false.</strong></returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_Implicit~Bluebit.MatrixLibrary.CMatrix">
      <summary>Defines conversions between CMatrix objects and arrays of complex structures.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_Inequality(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Tests whether two CMatrix objects represent non equal matrices.</summary>
      <returns>
        <strong>true</strong> if matrices are not equal; otherwise <strong>false.</strong></returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_Multiply">
      <summary>Multiplies matrices.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_Subtraction(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Subtracts two matrices.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;A, B&lt;/i&gt; are not of the same size. 
</exception>
      <returns>A CMatrix object that represents the result of the subtraction.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_UnaryNegation(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Negates the matrix.</summary>
      <returns>A CMatrix object representing the negation of the matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_UnaryPlus(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Returns a copy of the matrix.</summary>
      <returns>A copy of the CMatrix on right of the unary plus operator.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_Division(System.Numerics.Complex,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Performs scalar-matrix division.</summary>
      <returns>A CMatrix object that represents the result of the scalar-matrix division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_Division(Bluebit.MatrixLibrary.CMatrix,System.Numerics.Complex)">
      <summary>Performs matrix-scalar division.</summary>
      <returns>A CMatrix object that represents the result of the matrix-scalar division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_Division(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Performs matrix right division</summary>
      <exception caption="InvalidSizeException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.InvalidSizeException">&lt;I&gt;A, B&lt;/I&gt; do not have the same number of columns.</exception>
      <returns>A CMatrix object that represents the result of the matrix division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_Implicit(System.Numerics.Complex[0:,0:])~Bluebit.MatrixLibrary.CMatrix">
      <summary>Converts an array of type Complex to a CMatrix object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_Implicit(Bluebit.MatrixLibrary.CMatrix)~System.Numerics.Complex[0:,0:]">
      <summary>Converts a CMatrix object to an array of type Complex.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_Multiply(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Multiplies two matrices.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">Inner dimentions of matrices do not agree.</exception>
      <returns>A CMatrix object that represents the product.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_Multiply(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Multiplies two matrices.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The inner dimentions of the two matrices do not match.</exception>
      <returns>A CMatrix object that represents the result of the matrix multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_Multiply(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Left multiplies a matrix with a vector.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_Multiply(Bluebit.MatrixLibrary.CMatrix,Bluebit.MatrixLibrary.CVector)">
      <summary>Multiplies a matrix by a vector.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The &lt;i&gt;vector&lt;/i&gt; size does not match with the number of the &lt;i&gt;matrix&lt;/i&gt; columns.</exception>
      <returns>A CMatrix object that represents the product.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_Multiply(Bluebit.MatrixLibrary.CMatrix,System.Numerics.Complex)">
      <summary>Multiplies a matrix by a scalar.</summary>
      <returns>A CMatrix object that represents the product.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CMatrix.op_Multiply(System.Numerics.Complex,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Multiplies a scalar by a matrix.</summary>
      <returns>A CMatrix object that represents the product.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.Cols">
      <summary>Gets or sets the number of columns of the current matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.Data">
      <summary>This property is used while serializing and deserializing the CMatrix object and is not
intended to be used directly from your code.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.DataPtr">
      <summary>Gets the address of the unmanaged (native) memory block containing the matrix's elements.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.IsSquare">
      <summary>Indicates whether this instance represents a square matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.Item(System.Int32,System.Int32)">
      <summary>Gets or sets a single matrix element.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~IndexOutOfBoundsException">Any of &lt;i&gt;row, col&lt;/i&gt; parameters exceeds matrix size.</exception>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CMatrix.Rows">
      <summary>Gets or sets the number of rows of the current matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CQR.#ctor">
      <summary>Initializes a new instance of the CQR class computing the <strong>QR</strong>
factorization of a general complex matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CQR.#ctor(Bluebit.MatrixLibrary.CMatrix,System.Boolean)">
      <summary>Initializes a new instance of the CQR class computing the <strong>QR</strong> factorization of
a general complex matrix, specifying whether column pivoting will be used.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CQR.#ctor(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Initializes a new instance of the CQR class computing the <strong>QR</strong> factorization of
a general complex matrix using column pivoting.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CQR.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CQR.GetPivots">
      <summary>Gets an array of integers containing the pivot indices.</summary>
      <returns>An array of type <strong>integer</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CQR.Solve(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Solves a set of least-squares problems (with multiple right hands) using the <strong>QR</strong> factorization of a general complex matrix.</summary>
      <returns>A CMatrix object that contains the solution of the least-squares problems.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CQR.Cols">
      <summary>Gets the number of columns of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CQR.P">
      <summary>Gets the <strong>P</strong> factor, the permutation matrix of the <strong>QR</strong> factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CQR.Q">
      <summary>Gets the <strong>Q</strong> factor, the orthogonal part of the <strong>QR</strong> factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CQR.R">
      <summary>Gets the <strong>R</strong> factor, the upper triangular part of the <strong>QR</strong> factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CQR.Rows">
      <summary>Gets the number of rows of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor">
      <summary>Creates a new instance of the CSparseMatrix class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Creates a new instance of a CSparseMatrix using the contents of a dense <see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.CMatrix.html">CMatrix</see> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor(Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Creates a new instance of a CSparseMatrix copying the contents of another
<see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.CSparseMatrix">CSparseMatrix</see>.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor(System.Numerics.Complex[],System.Int32[],System.Int32[])">
      <summary>Creates a new instance of a CSparseMatrix from data in compressed sparse row (CSR)
format.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor(System.Int32,System.Boolean,System.Int32,System.Single)">
      <summary>Creates a new instance of CSparseMatrix representing a square matrix of the specified
size, specifies whether the matrix is hermitian and sets initial values for the capacity and the grow factor.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor(System.Int32,System.Boolean)">
      <summary>Creates a new instance of CSparseMatrix representing a square matrix of the specified
size, and specifies whether the matrix is hermitian.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor(System.Int32,System.Int32,System.Int32,System.Single)">
      <summary>Creates a new instance of a CSparseMatrix with the specified number or rows and
columns, initial capacity and grow factor.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Creates a new instance of a CSparseMatrix with the specified number of rows and
columns and initial capacity.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor(System.Int32,System.Int32)">
      <summary>Creates a new instance of a CSparseMatrix with the specified number of rows and
columns.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.#ctor">
      <summary>Creates a new instance of an empty CSparseMatrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Add">
      <summary>
        <para>Adds two complex sparse matrices. The operation is defined as:</para>
        <para>
          <em>C=A+beta*op(B)</em>
        </para>
      </summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Clone">
      <summary>Creates a deep copy of the current sparse matrix.</summary>
      <returns>A new CSparseMatrix object that contains the same data as this.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Equals(System.Object)">
      <summary>Returns a value indicating if this sparse matrix is equal to another sparse matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.FillRandom">
      <summary>Fills a sparse matrix with random values.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.GetHashCode">
      <summary>Returns a hash code value that represents this object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <strong>ISerializable</strong> interface and returns the data needed to serialize the
CSparseMatrix class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.IsEqual">
      <summary>Returns a value indicating whether this instance of the CSparseMatrix object is equal to another instance.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Multiply">
      <summary>Multiplies sparse matrices.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Negate(Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Returns the negation of a sparse matrix.</summary>
      <returns>A CSparseMatrix Class object representing the negation of the sparse matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.RemoveZeros">
      <summary>Removes all elements which are close to zero from the internal storage.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Subtract(Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Subtracts a complex sparse matrix from another complex sparse matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.ToDense">
      <summary>Converts the current instance to a dense matrix.</summary>
      <returns>A CMatrix object that represents the sparse matrix in dense format.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.ToString">
      <summary>Converts this instance of CSparseMatrix to a formatted string.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Transpose">
      <summary>Returns the transpose of the sparse matrix.</summary>
      <returns>A CSparseMatrix instance that represents the transpose of the current sparse matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Add(Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Adds two complex sparse matrices.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Add(Bluebit.MatrixLibrary.CSparseMatrix,System.Numerics.Complex,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>
        <para>Adds two complex sparse matrices. The operation is defined as:</para>
        <para>
          <em>C=A+beta*op(B)</em>
        </para>
      </summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.FillRandom">
      <summary>Fills the CSparseMatrix object with random values ranging from 1 to 10 using a
density of 1%.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.FillRandom(System.Double)">
      <summary>Fills the CSparseMatrix object with random values ranging from 1 to 10 using the
specified density.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.FillRandom(System.Double,System.Double,System.Double)">
      <summary>Fills the CSparseMatrix object with random values ranging from lower bound to upper
bound using the specified density.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.FillRandom(System.Double,System.Double,System.Double,System.Int32)">
      <summary>Fills the CSparseMatrix object with random values ranging from lower bound to upper
bound, rounded to the specified number of decimal places, using the specified density.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.IsEqual(Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Returns a value indicating whether this instance of the CMatrix object is
equal to another instance within the default tolerance.</summary>
      <returns>true if matrices are equal, otherwise false.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.IsEqual(Bluebit.MatrixLibrary.CSparseMatrix,System.Double)">
      <summary>Returns a value indicating whether this instance of the CMatrix object is
equal to another instance within a specified tolerance.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Multiply(Bluebit.MatrixLibrary.CSparseMatrix,System.Numerics.Complex)">
      <summary>Returns a scalar-matrix product.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Multiply(Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CVector)">
      <summary>Multiplies a sparse matrix by a vector.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The length of vector &lt;i&gt;x&lt;/i&gt; does not equal to the number of matrix columns.</exception>
      <returns>A CVector object containing the result.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Multiply(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Left multiplies a sparse matrix by a vector.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The length of vector x does not equal to the number of matrix columns.</exception>
      <returns>A CVector object containing the result.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Multiply(Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Multiplies a sparse matrix by a dense matrix.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The inner dimensions of the matrices do not match.</exception>
      <returns>A CMatrix object that contains the result.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Multiply(Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Multiplies two sparse matrices and return the result into another sparse matrix.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The inner dimensions of matrices do not match.</exception>
      <returns>A CSparseMatrix object containing the result.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Multiply(Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Multiplies two sparse matrices and return the result into another sparse matrix.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The inner dimensions of matrices do not match.</exception>
      <returns>A CSparseMatrix object containing the result.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Multiply(System.Numerics.Complex,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CVector,System.Numerics.Complex,Bluebit.MatrixLibrary.CVector)">
      <summary>Computes a sparse matrix by a vector product and stores the result to another vector. The operation is defined as:

<para></para><para><em>y=alpha*op(A)*B+beta*y</em></para></summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~IndexOutOfBoundsException">The length of vector &lt;i&gt;x&lt;/i&gt; does not equal to the number of matrix columns &lt;/br&gt;&lt;i&gt;or&lt;/i&gt;&lt;/br&gt; the lenght of vector &lt;i&gt;y&lt;/i&gt; does not equal the number of matrix rows.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.Multiply(System.Numerics.Complex,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CMatrix,System.Numerics.Complex,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Computes a sparse matrix by a dense matrix product and stores the result to another dense matrix. The operation is defined as:

<para></para><para><em>C=alpha*op(A)*B+beta*C</em></para></summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~SizeMismatchException">The inner dimensions of the two matrices do not match.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.RemoveZeros">
      <summary>Removes all elements which are close to zero from the internal storage.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.RemoveZeros(System.Double)">
      <summary>Removes all elements with absolute value smaller than the specified tolerance.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.RemoveZeros(System.Double,System.Boolean)">
      <summary>Removes all elements which are equal to zero within the specified tolerance, specifying whether to remove the diagonal zero entries.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.ToString">
      <summary>Converts this instance of CSparseMatrix to a formatted string using the default
values for format string, separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted <strong>string</strong>containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.ToString(System.String)">
      <summary>Converts this instance of CSparseMatrix to a formatted string specifying a format
string, and using the default values for separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted <strong>string</strong>containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.ToString(System.String,System.String)">
      <summary>Converts this instance of CSparseMatrix to a formatted string specifying a format
string, and a separator and using the default values for left and right borders and end of line characters.</summary>
      <returns>A formatted <strong>string</strong>containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.ToString(System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of CSparseMatrix to a formatted string specifying a format
string, a separator, left and right borders and end of line characters.</summary>
      <returns>A formatted <strong>string</strong>containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.ToString(System.IFormatProvider,System.String)">
      <summary>Converts this instance of CSparseMatrix to a formatted string specifying
culture-specific format information and a format string.</summary>
      <returns>A formatted <strong>string</strong>containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.ToString(System.IFormatProvider,System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of CSparseMatrix to a formatted string specifying
culture-specific format information, a format string, a separator, left and right borders and end of line characters.</summary>
      <returns>A formatted <strong>string</strong>containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.op_Addition(Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Adds two sparse matrices.</summary>
      <returns>A CSparseMatrix object that represents the result of the addition.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.op_Equality(Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Tests whether two CSparseMatrix objects represent equal matrices.</summary>
      <returns>
        <strong>true</strong> if sparse matrices are equal; otherwise <strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.op_Inequality(Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Tests whether two CSparseMatrix objects represent non equal matrices.</summary>
      <returns>
        <strong>true</strong> if matrices are not equal; <strong>false</strong> otherwise.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.op_Multiply">
      <summary>Multiplies a sparse matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.op_Subtraction(Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Subtracts a sparse matrix from another sparse matrix.</summary>
      <returns>A CSparseMatrix object containing the result of the subtraction.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.op_UnaryNegation(Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Negates a matrix.</summary>
      <returns>A CSparseMatrix representing the negation of the matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.op_UnaryPlus(Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Returns a copy of the sparse matrix.</summary>
      <returns>A copy of the CSparseMatrix on the right side of the unary plus operator.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.op_Multiply(Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Multiplies two sparse matrices and result the result into another sparse matrix.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~SizeMismatchException">The inner dimensions of matrices do not match.</exception>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~SizeMismatchException">The inner dimensions of matrices do not match.</exception>
      <returns>A CSparseMatrix object containing the matrix-matrix product.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.op_Multiply(Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CMatrix)">
      <summary>Multiplies a sparse matrix by a dense matrix and returns the result into a dense matrix.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~SizeMismatchException">The inner dimensions of matrices do not match.</exception>
      <returns>A CMatrix object that contains the matrix-matrix product.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.op_Multiply(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Left multiplies a sparse matrix by a vector.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~SizeMismatchException">The vector size does not equal the number of matrix rows.</exception>
      <returns>A CVector object containing the result of the vector-matrix product.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.op_Multiply(Bluebit.MatrixLibrary.CSparseMatrix,Bluebit.MatrixLibrary.CVector)">
      <summary>Multiplies a sparse matrix by a vector.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~SizeMismatchException">The vector size does not equal the number of matrix columns.</exception>
      <returns>A CVector object containing the result of the matrix-vector product.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.op_Multiply(System.Numerics.Complex,Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Multiplies a scalar by a sparse matrix.</summary>
      <returns>A CSparseMatrix Class object that represents the matrix-scalar product.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseMatrix.op_Multiply(Bluebit.MatrixLibrary.CSparseMatrix,System.Numerics.Complex)">
      <summary>Multiplies a sparse matrix by a scalar.</summary>
      <returns>A CSparseMatrix Class object that represents the matrix-scalar product.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.Capacity">
      <summary>Gets or sets the number of elements that the internal storage of the sparse matrix can hold without resizing.<br />
Gets or sets the number of elements that the internal storage of the sparse matrix can hold without resizing.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.Cols">
      <summary>Gets or sets the number of sparse matrix columns.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.Data">
      <summary>This property is used while serializing and deserializing the CSparseMatrix and it is
not intended to be used in user code.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.GrowFactor">
      <summary>Gets or sets the number by which the Capacity is multiplied whenever a
greater internal storage for the matrix is needed.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.Hermitian">
      <summary>Indicates whether this instance represents a hermitian sparse matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.Item(System.Int32,System.Int32)">
      <summary>Gets or sets a single element of the sparse matrix.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~IndexOutOfBoundsException">Any of &lt;i&gt;row, col&lt;/i&gt; parameters exceeds matrix size.</exception>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.NumElements">
      <summary>Gets the number of elements contained in the internal storage of the sparse matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseMatrix.Rows">
      <summary>Gets or sets the number of sparse matrix rows.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseSolver.#ctor(Bluebit.MatrixLibrary.CSparseMatrix)">
      <summary>Creates an instance of the SparseSolver object for the specified sparse matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseSolver.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseSolver.Solve">
      <summary>Solves a system of linear equations</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseSolver.Solve(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Solves a system of linear equations for multiple right hands.</summary>
      <returns>A CMatrix object that contains the solution of the system of linear
equations.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSparseSolver.Solve(Bluebit.MatrixLibrary.CVector)">
      <summary>Solves a system of linear equations for a single right hand vector.</summary>
      <returns>A CVector object containing the solution of the system of linear
equations.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseSolver.FactorizationStrategy">
      <summary>Specifies the factorization strategy.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseSolver.FillInReducingMethod">
      <summary>Specifies the method to be used in order to reduce the fill in of the matrix factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseSolver.MatrixType">
      <summary>Specifies the matrix type.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseSolver.PivotEpsilon">
      <summary>Specifies a value to be used as a pivot when a tiny pivot is encountered.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseSolver.RefinementSteps">
      <summary>Specifies the maximum number of the refinement steps to be used.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseSolver.Status">
      <summary>Returns the status of the solver.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSparseSolver.StoppingTolerance">
      <summary>Specifies the allowable tolerance of the computed solution.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.#ctor">
      <summary>Initializes a new instance of the CSVD class computing the <strong>Singular
Value Decomposition</strong> (<strong>SVD</strong>) of a general complex matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.#ctor(Bluebit.MatrixLibrary.CMatrix,System.Boolean)">
      <summary>Initializes a new instance of the CSVD class computing the <strong>Singular Value
Decomposition</strong> of a general complex matrix, specifying whether the singular vectors (<strong>U</strong> and <strong>V</strong> matrices) will be
computed.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.#ctor(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Initializes a new instance of the CSVD class computing the <strong>Singular Value
Decomposition</strong> (<strong>SVD</strong>) of a general complex matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.PseudoInverse">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix that is represented by this singular value decomposition.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.Rank">
      <summary>Returns the matrix rank.</summary>
      <returns>An <strong>integer</strong> value representing the matrix rank.An <strong>integer</strong> value representing the matrix rank.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.PseudoInverse">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix that is represented by this singular value decomposition.</summary>
      <returns>A CMatrix object representing the Moore-Penrose inverse of the factored matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.PseudoInverse(System.Double)">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix that is represented by this singular value decomposition.</summary>
      <returns>A CMatrix object representing the Moore-Penrose inverse of the factored matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.Rank">
      <summary>Returns the matrix rank.</summary>
      <returns>An <strong>integer</strong>value representing the matrix rank.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSVD.Rank(System.Double)">
      <summary>Returns the matrix rank.</summary>
      <returns>An <strong>integer</strong> value representing the matrix rank.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSVD.S">
      <summary>Returns the <strong><font face="Symbol">S</font></strong> part of the singular value decomposition.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSVD.SingularValue(System.Int32)">
      <summary>Gets the specified singular value.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">The specified index is less than zero or greater than n-1 where n equals min(Rows,Cols).</exception>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSVD.SingularValues">
      <summary>Gets a vector containing all the computed singular values.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSVD.Succeeded">
      <summary>Indicates whether the all singular values were calculated successfully.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSVD.U">
      <summary>Returns the <strong>U</strong> part of the singular value decomposition.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSVD.V">
      <summary>Returns the <strong>V</strong> part of the singular value decomposition.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSVD.VH">
      <summary>Returns the Hermitian transpose (adjoin) of the <strong>V</strong> part of the singular value decomposition.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSymEigen.#ctor">
      <summary>Initializes a new instance of the CSymEigen class computing the eigen
decomposition of a complex Hermitian matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSymEigen.#ctor(Bluebit.MatrixLibrary.CMatrix,System.Boolean)">
      <summary>Initializes a new instance of the CSymEigen class computing the eigenvalues and
optionally the eigenvectors of a complex Hermitian matrix.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">&lt;i&gt;matrix&lt;/i&gt; parameter does not represent a square matrix.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSymEigen.#ctor(Bluebit.MatrixLibrary.CMatrix)">
      <summary>Initializes a new instance of the CSymEigen class computing the eigenvalues and the
eigenvectors of a complex Hermitian matrix.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">&lt;i&gt;matrix&lt;/i&gt; parameter does not represent a square matrix.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CSymEigen.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSymEigen.D">
      <summary>Gets a real diagonal matrix, containing all the computed eigenvalues in its main diagonal.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSymEigen.Eigenvalue(System.Int32)">
      <summary>Gets the specified eigenvalue.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">The specified index is less than zero or greater than n-1 where n is the value returned by the Size property of this class.</exception>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSymEigen.Eigenvalues">
      <summary>Returns a vector containing all the computed eigenvalues.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSymEigen.Eigenvector(System.Int32)">
      <summary>Gets the specified eigenvector.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">The specified index parameter is less than zero or greater than n-1 where n is the value returned by the Size property of this class.</exception>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSymEigen.Eigenvectors">
      <summary>Gets the eigenvectors matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSymEigen.Size">
      <summary>Gets the size of matrix that is represented by this eigen decomposition.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CSymEigen.Succeeded">
      <summary>Indicates whether the eigenvalues-eigenvectors calculation succeeded to completion.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.#ctor">
      <summary>Initializes a new instance of the CVector class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.#ctor(System.Numerics.Complex[])">
      <summary>Initializes a new instance of the CVector class using the content of an array.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.#ctor(System.Int32,System.Numerics.Complex)">
      <summary>Creates a new instance of the CVector class specifying its length and a value to initialize
its components.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.#ctor(System.Int32)">
      <summary>Creates a new instance of the CVector class specifying its length.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.#ctor(Bluebit.MatrixLibrary.CVector)">
      <summary>Creates a new instance of the CVector class, copying the content of an existing vector.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.#ctor">
      <summary>Initializes a new instance of the CVector class creating a vector of length equal to 3.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.AbsSum">
      <summary>Returns the sum of magnitudes of the vector elements.</summary>
      <returns>A <strong>double</strong> value equal to the sum of magnitudes of the vector elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Add">
      <summary>Adds vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ApplyFunction">
      <summary>Returns a new CVector object, whose elements are the result of applying
the specified <strong>complex</strong> function to the elements of this vector.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Clear">
      <summary>Sets the value of all the CVector elements to zero.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Clone">
      <summary>Creates a duplicate of this CVector object.</summary>
      <returns>A new CVector object that contains the same data as this.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Divide">
      <summary>Divides complex vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.DotProduct">
      <summary>Returns the dot product of vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Equals(System.Object)">
      <summary>Returns a value indicating whether this CVector object is equal to another vector.</summary>
      <returns>
        <strong>true</strong> if <em>obj</em> is an instance of the CVector class and represents a
vector that has the same length as this instance and also all the elements of <em>obj</em> are equal to the elements of this instance; <strong>false</strong>
otherwise.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.FillRandom">
      <summary>Fills the CVector object with random values.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.GetHashCode">
      <summary>Returns a hash code value that represents this object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <strong>ISerializable</strong> interface and returns the data needed to serialize the
CVector class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.HasINFs">
      <summary>Returns a value indicating whether the current vector contains any elements that evaluate to <strong>negative</strong> or
<strong>positive</strong><strong>infinity</strong>.</summary>
      <returns>
        <strong>true</strong> if any of the vector elements evaluates to <strong>negative</strong> or <strong>positive infinity</strong>; otherwise
<strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.HasNaNs">
      <summary>Returns a value indicating whether the current vector contains any elements that evaluate to <strong>NaN</strong> values.</summary>
      <returns>
        <strong>true</strong> if any of the vector elements evaluates to a <strong>NaN</strong> value; otherwise <strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Imag">
      <summary>Returns a Vector object containing the imaginary parts of the
<see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.CVector">CVector</see> elements.</summary>
      <returns>A Vector object that contains just the imaginary parts of the
<see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.CVector">CVector</see> object's elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.IsFinite">
      <summary>Returns a value indicating whether the current vector contains any elements that evaluate either to <strong>NaN</strong> or to
<strong>negative</strong> or <strong>positive</strong><strong>infinity</strong>.</summary>
      <returns>
        <strong>true</strong> if all elements of the current vector have a value other <strong>NaN</strong>,
<strong>negative</strong><strong>infinity</strong>, <strong>positive</strong><strong>infinity</strong>; otherwise <strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Multiply">
      <summary>Multiplies vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Norm">
      <summary>Returns the Euclidean norm of the vector.</summary>
      <returns>A <strong>double</strong> equal to the Euclidean norm of the vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Normalize(Bluebit.MatrixLibrary.NormalizeMode)">
      <summary>
        <para>Normalizes the current vector according to the specified mode.</para>
      </summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Real">
      <summary>Returns a Vector object containing the real parts of the
<see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.CVector">CVector</see> elements.</summary>
      <returns>A Vector object that contains just the real parts of the
<see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.CVector">CVector</see> object's elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Resize(System.Int32)">
      <summary>Resizes the vector preserving its content.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Subtract">
      <summary>Subtracts complex vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Sum">
      <summary>Returns the sum of vector elements.</summary>
      <returns>A complex equal to the sum of vector elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ToArray">
      <summary>Returns an array of type complex containing the same values as the current vector.</summary>
      <returns>An array of type complex containing the same values as the current vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ToCMatrix">
      <summary>Converts current vector to a CMatrix object.</summary>
      <returns>A one-column CMatrix object containing the same values as this vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ToString">
      <summary>Converts this instance of CVector to a formatted string.</summary>
      <returns>A formatted <strong>string</strong> containing all vector elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Add(System.Numerics.Complex,Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CVector)">
      <summary>
        <para>Computes a vector-scalar product and adds the result to a vector. The result is defined as:</para>
        <para>
          <em>y=alpha*x+y</em>
        </para>
      </summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Add(Bluebit.MatrixLibrary.CVector,System.Numerics.Complex)">
      <summary>Adds a vector with a scalar.</summary>
      <returns>A CVector object representing the result of the addition.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Add(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CVector)">
      <summary>Adds two vectors.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;x, y&lt;/i&gt; are not of the same length.</exception>
      <returns>A CVector object that represents the result of the addition.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction2Cmp2Int,System.Numerics.Complex,System.Int32)">
      <summary>Returns a new CVector object, whose elements are the result of applying the specified
complex function to the elements of this vector.</summary>
      <returns>A new CVector object with the same length as this vector, whose elements are the results of
applying the specified <em>function</em> to the elements of this vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction1Cmp2Int,System.Int32)">
      <summary>Returns a new CVector object, whose elements are the result of applying the specified
complex function to the elements of this vector.</summary>
      <returns>
        <para>A new CVector object with the same length as this vector, whose elements are the results of applying
the specified <em>function</em> to the elements of this vector.</para>
      </returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction1Cmp1Int,System.Int32)">
      <summary>Returns a new CVector object, whose elements are the result of applying the specified
complex function to the elements of this vector.</summary>
      <returns>A new CVector object with the same length as this vector, whose elements are the results of
applying the specified <em>function</em> to the elements of this vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction2Cmp,System.Numerics.Complex)">
      <summary>Returns a new CVector object, whose elements are the result of applying the specified
complex function to the elements of this vector.</summary>
      <returns>A new CVector object with the same length as this vector, whose elements are the results of
applying the specified <em>function</em> to the elements of this vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ApplyFunction(Bluebit.MatrixLibrary.ComplexFunction1Cmp)">
      <summary>Returns a new CVector object, whose elements are the result of applying the specified
complex function to the elements of this vector.</summary>
      <returns>A new CVector object with the same length as this vector, whose elements are the results of
applying the specified <em>function</em> to the elements of this vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Divide(System.Numerics.Complex,Bluebit.MatrixLibrary.CVector)">
      <summary>Divides a scalar by a complex vector.</summary>
      <returns>A CVector object representing the result of the scalar-vector division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Divide(Bluebit.MatrixLibrary.CVector,System.Numerics.Complex)">
      <summary>Divides a complex vector by a scalar.</summary>
      <returns>A CVector object representing the result of the vector-scalar division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Divide(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CVector)">
      <summary>Divides two complex vectors.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;x, y&lt;/i&gt; are not of the same length.</exception>
      <returns>A CVector object representing the result of the vector-vector division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.DotProduct(Bluebit.MatrixLibrary.CVector)">
      <summary>Returns the dot product of this vector with another vector.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">Vectors are not of the same size.</exception>
      <returns>A complex representing the dot product of this vector with the specified vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.DotProduct(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CVector)">
      <summary>Returns the dot product of two complex vectors.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">Vectors are not of the same size.</exception>
      <returns>A complex representing the dot product of the two vectors.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.FillRandom">
      <summary>Fills the CVector object with random values ranging from 0 to 10, rounded to zero decimal
places.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.FillRandom(System.Double,System.Double)">
      <summary>Fills the CVector object with random values ranging from lower to upper bound, rounded to 0
decimal places.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.FillRandom(System.Double,System.Double,System.Int32)">
      <summary>Fills the CVector object with random values ranging from lower bound to upper bound,
rounded to the specified number of decimal places.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Multiply(Bluebit.MatrixLibrary.CVector,System.Numerics.Complex)">
      <summary>Multiplies a vector by a scalar.</summary>
      <returns>A CVector object representing the result of the vector-scalar multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Multiply(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CVector)">
      <summary>Multiplies two vectors.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;x, y&lt;/i&gt; are not of the same length.</exception>
      <returns>A CVector object that represents the result of the multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Subtract(System.Numerics.Complex,Bluebit.MatrixLibrary.CVector)">
      <summary>Subtracts a complex vector from a scalar.</summary>
      <returns>A CVector object representing the result of the subtraction.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Subtract(Bluebit.MatrixLibrary.CVector,System.Numerics.Complex)">
      <summary>Subtracts a scalar from a complex vector.</summary>
      <returns>A CVector object representing the result of the subtraction.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.Subtract(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CVector)">
      <summary>Subtracts a vector from another vector.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;x, y&lt;/i&gt; are not of the same length.</exception>
      <returns>A CVector object representing the result of the subtraction.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ToString">
      <summary>Converts this instance of CVector to a formatted string using the default values for format
string, separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted <strong>string</strong>containing all vector elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ToString(System.String)">
      <summary>Converts this instance of CVector to a formatted string specifying a format string, and
using the default values for separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted <strong>string</strong> containing all vector elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ToString(System.String,System.String)">
      <summary>Converts this instance of CVector to a formatted string specifying a format string, and a
separator and using the default values for left and right borders and end of line characters.</summary>
      <returns>A formatted <strong>string</strong> containing all vector elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ToString(System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of CVector to a formatted string specifying a format string, a
separator, left and right borders and end of line characters.</summary>
      <returns>A formatted <strong>string</strong> containing all vector elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ToString(System.IFormatProvider,System.String)">
      <summary>Converts this instance of the <strong>%%ShortParentItemName%%</strong> object to a formatted string specifying culture-specific format
information and a format string.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.ToString(System.IFormatProvider,System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of <strong>%%ShortParentItemName%%</strong> to a formatted string specifying culture-specific format information, a format
string, a separator, left and right borders and end of line characters.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Addition">
      <summary>Adds complex vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Division">
      <summary>Divides complex vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Equality(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CVector)">
      <summary>Tests whether two CVector objects represent equal vectors.</summary>
      <returns>
        <strong>true</strong> if vectors are equal; otherwise <strong>false.</strong></returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Implicit~Bluebit.MatrixLibrary.CVector">
      <summary>Converts a CVector object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Inequality(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CVector)">
      <summary>Tests whether two CVector objects represent equal vectors.</summary>
      <returns>
        <strong>true</strong> if vectors are not equal; otherwise <strong>false.</strong></returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Multiply">
      <summary>Multiplies vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Subtraction">
      <summary>Subtracts complex vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Addition(System.Numerics.Complex,Bluebit.MatrixLibrary.CVector)">
      <summary>Adds a scalar and a vector.</summary>
      <returns>A CVector object representing the result of the addition.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Addition(Bluebit.MatrixLibrary.CVector,System.Numerics.Complex)">
      <summary>Adds a vector and a scalar.</summary>
      <returns>A CVector object representing the result of the addition.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Addition(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CVector)">
      <summary>Adds two vectors.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;x, y&lt;/i&gt; are not of the same length.</exception>
      <returns>A CVector object representing the result of the addition.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Division(System.Numerics.Complex,Bluebit.MatrixLibrary.CVector)">
      <summary>Divides a scalar by a complex vector.</summary>
      <returns>A CVector object representing the result of the scalar-vector division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Division(Bluebit.MatrixLibrary.CVector,System.Numerics.Complex)">
      <summary>Divides a complex vector by a scalar.</summary>
      <returns>A CVector object representing the result of the vector-scalar division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Division(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CVector)">
      <summary>Divides two complex vectors.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;x, y&lt;/i&gt; are not of the same length.</exception>
      <returns>A CVector object representing the result of the vector-vector division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Implicit(System.Numerics.Complex[])~Bluebit.MatrixLibrary.CVector">
      <summary>Converts an array of complex type to a CVector object.</summary>
      <returns>A CVector object containing the same values as the complex array.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Implicit(Bluebit.MatrixLibrary.CVector)~System.Numerics.Complex[0:,0:]">
      <summary>Converts a CVector object to an array of complex type.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Implicit(Bluebit.MatrixLibrary.CVector)~Bluebit.MatrixLibrary.CMatrix">
      <summary>Converts a CVector to a <see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.CMatrix">CMatrix</see>.</summary>
      <returns>A CMatrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Multiply(System.Numerics.Complex,Bluebit.MatrixLibrary.CVector)">
      <summary>Multiplies a scalar by a complex vector.</summary>
      <returns>A CVector object representing the result of the multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Multiply(Bluebit.MatrixLibrary.CVector,System.Numerics.Complex)">
      <summary>Multiplies a complex vector by a scalar.</summary>
      <returns>A CVector object representing the result of the multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Multiply(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CVector)">
      <summary>Multiplies two complex vectors.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;x, y&lt;/i&gt; are not of the same length.</exception>
      <returns>A CVector object representing the result of the multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Subtraction(System.Numerics.Complex,Bluebit.MatrixLibrary.CVector)">
      <summary>Subtracts a complex vector from a scalar.</summary>
      <returns>A CVector object representing the result of the subtraction.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Subtraction(Bluebit.MatrixLibrary.CVector,System.Numerics.Complex)">
      <summary>Subtracts a scalar from a complex vector.</summary>
      <returns>A CVector object representing the result of the subtraction.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.CVector.op_Subtraction(Bluebit.MatrixLibrary.CVector,Bluebit.MatrixLibrary.CVector)">
      <summary>Subtracts a vector from another vector.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;x, y&lt;/i&gt; are not of the same length.</exception>
      <returns>A CVector instance on the left of the subtraction operator.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.Data">
      <summary>This property is used while serializing and deserializing the CVector object and is not
intended to be used directly from your code.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.DataPtr">
      <summary>Gets the address of the unmanaged (native) memory block containing the vector's elements.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.Item(System.Int32)">
      <summary>Gets or sets a single vector element.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;index&lt;/i&gt; exceeds vector length.</exception>
    </member>
    <member name="P:Bluebit.MatrixLibrary.CVector.Length">
      <summary>Gets or sets the vector length.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Eigen.#ctor">
      <summary>Initializes a new instance of the Eigen class computing the eigen
decomposition of a general square real matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Eigen.#ctor(Bluebit.MatrixLibrary.Matrix)">
      <summary>Creates a new instance of the Eigen class, computing the eigenvalues and the right
eigenvectors of a general square real matrix, with preliminary matrix balancing.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">&lt;i&gt;matrix&lt;/i&gt; parameter does not represent a square matrix.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Eigen.#ctor(Bluebit.MatrixLibrary.Matrix,System.Boolean)">
      <summary>Creates a new instance of the Eigen class computing the eigenvalues and optionally the right
eigenvectors of a general real complex matrix, with preliminary matrix balancing.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">&lt;i&gt;matrix&lt;/i&gt; parameter does not represent a square matrix.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Eigen.#ctor(Bluebit.MatrixLibrary.Matrix,System.Boolean,System.Boolean)">
      <summary>Creates a new instance of the Eigen class computing the eigenvalues and optionally the right
and/or the left eigenvectors of a general square real matrix, with preliminary matrix balancing.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">&lt;i&gt;matrix&lt;/i&gt; parameter does not represent a square matrix.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Eigen.#ctor(Bluebit.MatrixLibrary.Matrix,System.Boolean,System.Boolean,Bluebit.MatrixLibrary.BalanceType)">
      <summary>Creates a new instance of the Eigen class computing the eigenvalues and optionally the right
and/or the left eigenvectors of a general square real matrix, using the specified type of preliminary matrix balancing.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">&lt;i&gt;matrix&lt;/i&gt; parameter does not represent a square matrix.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Eigen.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Eigen.D">
      <summary>Gets a complex diagonal matrix, containing all the computed eigenvalues in its main diagonal.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Eigen.Eigenvalue(System.Int32)">
      <summary>Gets the specified eigenvalue.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Eigen.Eigenvalues">
      <summary>Returns a vector containing all the computed eigenvalues.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Eigen.Eigenvector(System.Int32)">
      <summary>Gets the specified right eigenvector.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Eigen.Eigenvectors">
      <summary>Gets the right eigenvectors matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Eigen.LeftEigenvector(System.Int32)">
      <summary>Gets the specified left eigenvector.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Eigen.LeftEigenvectors">
      <summary>Gets the left eigenvectors matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Eigen.Size">
      <summary>Gets the size of matrix that is represented by this eigen decomposition.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Eigen.Succeeded">
      <summary>Indicates whether the eigenvalues-eigenvectors calculation succeeded to completion.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.IndexOutOfBoundsException.#ctor">
      <summary>Creates an new instance of the IndexOutOfBoundsException
class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.IndexOutOfBoundsException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the IndexOutOfBoundsException class with the
specified message and inner exception.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.IndexOutOfBoundsException.#ctor(System.String)">
      <summary>Creates a new instance of the IndexOutOfBoundsException class with the
specified message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.IndexOutOfBoundsException.#ctor">
      <summary>Creates a new instance of the IndexOutOfBoundsException class with the
default message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.InvalidSizeException.#ctor">
      <summary>Creates a new instance of the InvalidSizeException class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.InvalidSizeException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the InvalidSizeException class with the specified
message and inner exception.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.InvalidSizeException.#ctor(System.String)">
      <summary>Creates a new instance of the InvalidSizeException class with the specified
message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.InvalidSizeException.#ctor">
      <summary>Creates a new instance of the InvalidSizeException class with the default
message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.LQ.#ctor(Bluebit.MatrixLibrary.Matrix)">
      <summary>Initializes a new instance of the LQ class computing the <strong>LQ</strong> factorization of a
general real matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.LQ.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.LQ.Solve(Bluebit.MatrixLibrary.Matrix)">
      <summary>Solves an underdetermined system of linear equations using the <strong>LQ</strong> factorization of a real matrix.</summary>
      <returns>A Matrix object that contains the solution of the system of linear equations.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LQ.Cols">
      <summary>Gets the number of columns of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LQ.L">
      <summary>Gets the factor <strong>L</strong>, the lower triangular matrix of the <strong>LQ</strong> factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LQ.Q">
      <summary>Gets the factor <strong>Q</strong>, the orthogonal matrix of the <strong>LQ</strong> factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LQ.Rows">
      <summary>Gets the number of rows of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.LU.#ctor(Bluebit.MatrixLibrary.Matrix)">
      <summary>Initializes a new instance of the LU class computing the <strong>LU</strong> factorization of a
general complex matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.LU.Determinant">
      <summary>Returns the determinant of a square real matrix using its <strong>LU</strong> factorization.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">The &lt;strong&gt;LU&lt;/strong&gt; factorization represents a non-square matrix.</exception>
      <returns>A <strong>double</strong> that equals to the determinant of the matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.LU.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.LU.GetPivots">
      <summary>Gets an array of integers containing the pivot indices.</summary>
      <returns>An array of type <strong>integer</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.LU.Inverse">
      <summary>Returns the inverse of a square real matrix using its <strong>LU</strong> factorization.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">The &lt;strong&gt;LU&lt;/strong&gt; factorization does not represent a square matrix.</exception>
      <exception caption="SingularMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SingularMatrixException">The &lt;strong&gt;LU&lt;/strong&gt; factorization represents a singular matrix whose inverse cannot be calculated.</exception>
      <returns>A Matrix object containing the inverse of the factored matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.LU.Solve(Bluebit.MatrixLibrary.Matrix)">
      <summary>Solves a system of linear equations with multiple right hands using the <strong>LU</strong> factorization of a general real matrix.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">The &lt;strong&gt;LU&lt;/strong&gt; decomposition represents a non-square matrix.</exception>
      <exception caption="SingularMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SingularMatrixException">The &lt;strong&gt;LU&lt;/strong&gt; factorization represents a singular matrix that cannot be used to solve the system of linear equations.</exception>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The &lt;I&gt;rightHands&lt;/I&gt; parameter does not represent a matrix with the same number of rows as the factored matrix.</exception>
      <returns>A Matrix object that contains the solution of the system of linear equations.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LU.Cols">
      <summary>Gets the number of columns of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LU.IsSingular">
      <summary>Gets a Boolean value indicating whether the <strong>LU</strong> factorization represents a singular matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LU.L">
      <summary>Gets the <strong>L</strong> factor, the lower triangular part of the <strong>LU</strong> factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LU.P">
      <summary>Gets the <strong>P</strong> factor, the permutation matrix of the <strong>LU</strong> factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LU.Rows">
      <summary>Gets the number of rows of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.LU.U">
      <summary>Gets the <strong>U</strong> factor, the upper triangular part of the <strong>LU</strong> factorization.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.#ctor">
      <summary>Initializes a new instance of the Matrix class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the Matrix class specifying the number of rows and columns of
the newly created matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.#ctor(System.Int32,System.Int32,System.Double)">
      <summary>Initializes a new instance of the Matrix class specifying the number of rows and columns of
the newly created matrix, initializing its diagonal elements to the specified <strong>double</strong> value.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.#ctor(Bluebit.MatrixLibrary.Matrix)">
      <summary>Initializes a new instance of the Matrix class copying the content of an existing matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.#ctor(System.Double[0:,0:])">
      <summary>Initializes a new instance of the Matrix class using the content of a two dimensional array.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.#ctor(System.Double[0:,0:],System.Int32,System.Int32)">
      <summary>Initializes a new instance of the Matrix class using the content of a two dimensional array
specifying the number of rows and columns of the newly created matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.#ctor(System.Double[],System.Int32,System.Int32)">
      <summary>Initializes a new instance of the Matrix class using the content of a one dimensional array
specifying the number of rows and columns of the newly created matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.#ctor(System.Double[],System.Int32,System.Int32,Bluebit.MatrixLibrary.StorageOrder)">
      <summary>Initializes a new instance of the Matrix class using the content of a one-dimensional array,
specifying the size of the created matrix, and the storage order.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.#ctor">
      <summary>Initializes a new instance of the Matrix class creating a real 3x3 matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Add(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Adds two matrices.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;A, B&lt;/i&gt; are not of the same size.</exception>
      <returns>A Matrix object that represents the result of the addition.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ApplyFunction">
      <summary>Returns a new Matrix object, whose elements are the result of applying the
specified <strong>double</strong> function to the elements of this matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Clear">
      <summary>Sets the value of all the Matrix elements to zero.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Clone">
      <summary>Creates a duplicate of this Matrix object.</summary>
      <returns>A new Matrix object that contains the same data as this.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ColCorrelation(System.Int32,System.Int32)">
      <summary>Returns the correlation coefficient between two columns of the current matrix.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">Any of &lt;i&gt;col1, col2&lt;/i&gt; parameters exceeds matrix size.</exception>
      <returns>A <strong>double</strong> that equals to the correlation coefficient between the two columns.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ColCovariance(System.Int32,System.Int32)">
      <summary>Returns the covariance between two columns of the current matrix.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">Any of &lt;i&gt;col1, col2&lt;/i&gt; parameters exceeds matrix size.</exception>
      <returns>A <strong>double</strong> that equals to the covariance between the two columns.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ColsDotProduct(System.Int32,System.Int32)">
      <summary>Returns the dot product between two columns of the Matrix object.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">Any of &lt;i&gt;col1, col2&lt;/i&gt; parameters exceeds matrix size.</exception>
      <returns>A <strong>double</strong> that equals to the dot product between two columns of the matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ColSum(System.Int32)">
      <summary>Returns the sum of the elements of the specified column.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;colIndex&lt;/i&gt; exceeds matrix size.</exception>
      <returns>A <strong>double</strong> equal to the sum of the specified column.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ColVector(System.Int32)">
      <summary>Returns a new Vector object using the specified matrix column.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;col&lt;/i&gt; exceeds matrix size.</exception>
      <returns>A new Vector object containing the elements of the specified column.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Concatenate">
      <summary>Concatenates matrices.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.CorrelationMatrix">
      <summary>Returns a matrix containing the correlation coefficients between the columns of the current matrix.</summary>
      <returns>A Matrix object having as elements the correlation coefficients between the columns of the
current matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.CovarianceMatrix">
      <summary>Returns a matrix containing the covariances between the columns of the current matrix.</summary>
      <returns>A Matrix object having as elements the covariances between the columns of the current
matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.DeleteColumn(System.Int32)">
      <summary>Deletes a column of the current matrix.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;column&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.DeleteRow(System.Int32)">
      <summary>Deletes a row of the current matrix.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;row&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Determinant">
      <summary>Returns the value of the computed matrix determinant.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">The current matrix is not square.</exception>
      <returns>A <strong>double</strong> value that equals to the matrix determinant.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Diagonal">
      <summary>Returns a Vector object containing the main diagonal of the current matrix.</summary>
      <returns>A Vector object containing the elements of the main diagonal.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Divide">
      <summary>Performs matrix right division.</summary>
      <returns>A CMatrix object that represents the result of the matrix right division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Equals(System.Object)">
      <summary>Returns a value indicating whether this Matrix object is equal to another matrix.</summary>
      <returns>
        <strong>true</strong> if <em>obj</em> is an instance of the Matrix class and represents a
matrix that has the same size as this instance and also all the elements of <em>obj</em> are equal to the elements of this instance; <strong>false</strong>
otherwise.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.FillRandom">
      <summary>Fills Matrix object with random values.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.GetHashCode">
      <summary>Returns a hash code value that represents this object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <strong>ISerializable</strong> interface and returns the data needed to serialize the
Matrix class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.HadamardProduct(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Returns the Hadamard product of two matrices.</summary>
      <returns>A Matrix object representing the Hadamard product.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.HasINFs">
      <summary>Returns a value indicating whether the current matrix contains any elements that evaluate to <strong>negative</strong> or
<strong>positive</strong><strong>infinity</strong>..</summary>
      <returns>
        <strong>true</strong> if any of the matrix elements evaluates to <strong>negative</strong> or <strong>positive infinity</strong>; otherwise
<strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.HasNaNs">
      <summary>Returns a value indicating whether the current matrix contains any elements that evaluate to <strong>NaN</strong> values.</summary>
      <returns>
        <strong>true</strong> if any of the matrix elements evaluates to a <strong>NaN</strong> value; otherwise <strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.InsertColumn(System.Int32)">
      <summary>Inserts a column in the current matrix at the specified position.<!--DXMETADATA end --></summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.InsertRow(System.Int32)">
      <summary>Inserts a row in the current matrix at the specified position.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Inverse">
      <summary>Computes the inverse of the matrix and returns a reference to it.</summary>
      <exception caption="NotSquareMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.NotSquareMatrixException">Matrix is not square.</exception>
      <exception caption="SingularMatrixException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SingularMatrixException">Matrix is found to be singular.</exception>
      <returns>A Matrix object representing the inverse of the current matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.IsEqual">
      <summary>Returns a value indicating whether this Matrix object is equal to another
matrix within a tolerance.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.IsFinite">
      <summary>Returns a value indicating whether the current matrix contains any elements that evaluate either to <strong>NaN</strong> value or to
<strong>negative</strong> or <strong>positive</strong><strong>infinity</strong>.</summary>
      <returns>
        <strong>true</strong> if all elements of the current matrix have a value other <strong>NaN</strong>,
<strong>negative</strong><strong>infinity</strong>, <strong>positive</strong><strong>infinity</strong>; otherwise <strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.IsSymmetric">
      <summary>Returns a value indicating whether this matrix is symmetric.</summary>
      <returns>
        <strong>true</strong> if current matrix is found to be symmetric; otherwise <strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.LDivide(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Performs matrix left division.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;A, B&lt;/i&gt; do not have the same number of rows.</exception>
      <returns>A Matrix object that represents the result of the matrix left division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Multiply">
      <summary>Multiplies matrices.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Negate(Bluebit.MatrixLibrary.Matrix)">
      <summary>Returns the negation of the matrix.</summary>
      <returns>A Matrix object that represents the negate of the matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Norm(Bluebit.MatrixLibrary.NormType)">
      <summary>Returns the matrix norm.</summary>
      <returns>A <strong>double</strong> value representing the specified norm.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.NormalizeCols(Bluebit.MatrixLibrary.NormalizeMode)">
      <summary>
        <para>Normalizes the columns of the current matrix according to the specified mode.</para>
      </summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.NormalizeRows(Bluebit.MatrixLibrary.NormalizeMode)">
      <summary>
        <para>Normalizes the rows of the current matrix according to the specified mode.</para>
      </summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Plus(Bluebit.MatrixLibrary.Matrix)">
      <summary>Returns a copy of the matrix.</summary>
      <returns>A Matrix object which is the copy of <em>matrix</em>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.PseudoInverse">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix.</summary>
      <returns>A Matrix object representing the Moore-Penrose inverse (pseudoinverse) of this matrix.A
<see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.Matrix">Matrix</see> object representing the Moore-Penrose inverse (pseudoinverse) of this matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Rank">
      <summary>Returns the matrix rank.</summary>
      <returns>An <strong>integer</strong> value representing the matrix rank.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ReorderCols(System.Int32[])">
      <summary>Reorders matrix columns according to the specified order.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ReorderRows(System.Int32[])">
      <summary>Reorders matrix rows according to the specified order.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Resize(System.Int32,System.Int32)">
      <summary>Resizes matrix preserving its content.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.RowsDotProduct(System.Int32,System.Int32)">
      <summary>Returns the dot product between two rows of the Matrix object.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">Any of &lt;i&gt;row1, row2&lt;/i&gt; parameters exceeds matrix size.</exception>
      <returns>A <strong>double</strong> that equals to the dot product between two rows of the matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.RowSum(System.Int32)">
      <summary>Returns the sum of the elements of the specified row.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;rowIndex&lt;/i&gt; exceeds matrix size.</exception>
      <returns>A <strong>double</strong> equal to the sum of the specified row.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.RowVector(System.Int32)">
      <summary>Returns a new Vector object using the specified matrix row.</summary>
      <returns>A new Vector object containing the elements of the specified row.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetColumn">
      <summary>Sets the elements of a matrix column to specified value(s).</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetRow">
      <summary>Sets the elements of a matrix column to specified value(s).</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Solve(Bluebit.MatrixLibrary.Matrix)">
      <summary>Solves a system of linear equations.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The &lt;I&gt;rightHands&lt;/I&gt; parameter does not represent a matrix with the same number of rows as the current matrix. </exception>
      <returns>A Matrix object that contains the solution of the system of linear equations.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortCols">
      <summary>Sorts the columns of the current matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortRows">
      <summary>Sorts the rows of the current matrix by the elements of its first column in ascending order.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a subset of the current matrix.</summary>
      <returns>A Matrix instance that contains the subset of current matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Subtract(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Subtracts a matrix from another matrix.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;A, B&lt;/i&gt; are not of the same size.</exception>
      <returns>A Matrix object that represents the result of the subtraction.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SwapCols(System.Int32,System.Int32)">
      <summary>Swaps two matrix columns.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">Any of &lt;i&gt;col1, col2&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SwapRows(System.Int32,System.Int32)">
      <summary>Swaps two matrix rows.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">Any of &lt;i&gt;row1, row2&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Times">
      <summary>Multiplies the current matrix and returns the result.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ToArray">
      <summary>Converts current matrix to an array.</summary>
      <returns>An two-dimensional array of type <strong>double</strong> containing the elements of the current matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ToCMatrix">
      <summary>Converts the current Matrix to a
<see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.CMatrix">CMatrix</see> object.</summary>
      <returns>A CMatrix object that contains the same values as the current
<see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.Matrix">Matrix</see>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ToString">
      <summary>Converts this instance of Matrix to a formatted string.</summary>
      <returns>A formatted <strong>string</strong> containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Trace">
      <summary>Returns the sum of the elements of the main diagonal.</summary>
      <returns>A <strong>double</strong> value equal to matrix trace.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Transpose">
      <summary>Returns the transpose of the matrix.</summary>
      <returns>A Matrix instance that represents the transpose of the current matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction1Dbl)">
      <summary>Returns a new Matrix object, whose elements are the result of applying the specified
function to the elements of this matrix.</summary>
      <returns>A new Matrix object with the same size as this matrix, whose elements are the results of
applying the specified <em>function</em> to the elements of this matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction2Dbl,System.Double)">
      <summary>Returns a new Matrix object, whose elements are the result of applying the specified
function to the elements of this matrix.</summary>
      <returns>A new Matrix object with the same size as this matrix, whose elements are the results of
applying the specified <em>function</em> to the elements of this matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction1Dbl1Int,System.Int32)">
      <summary>Returns a new Matrix object, whose elements are the result of applying the specified
function to the elements of this matrix.</summary>
      <returns>A new Matrix object with the same size as this matrix, whose elements are the results of
applying the specified <em>function</em> to the elements of this matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction2Dbl2Int,System.Double)">
      <summary>Returns a new Matrix object, whose elements are the result of applying the specified
function to the elements of this matrix.</summary>
      <returns>A new Matrix object with the same size as this matrix, whose elements are the results of
applying the specified <em>function</em> to the elements of this matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction1Dbl2Int)">
      <summary>Returns a new Matrix object, whose elements are the result of applying the specified
function to the elements of this matrix.</summary>
      <returns>A new Matrix object with the same size as this matrix, whose elements are the results of
applying the specified <em>function</em> to the elements of this matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Concatenate(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.ConcatenateMode)">
      <summary>Concatenates two matrices horizontally or vertically.</summary>
      <returns>A Matrix object representing the concatenation of the two matrices.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Concatenate(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Concatenates two matrices horizontally.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Divide(System.Double,Bluebit.MatrixLibrary.Matrix)">
      <summary>Performs scalar-matrix division.</summary>
      <returns>A Matrix object that represents the result of the scalar-matrix division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Divide(Bluebit.MatrixLibrary.Matrix,System.Double)">
      <summary>Performs matrix-scalar division.</summary>
      <returns>A Matrix object that represents the result of the matrix-scalar division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Divide(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Performs matrix right division</summary>
      <exception caption="InvalidSizeException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.InvalidSizeException">&lt;I&gt;A, B&lt;/I&gt; do not have the same number of columns.</exception>
      <returns>A Matrix object that represents the result of the matrix division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.FillRandom">
      <summary>Fills the Matrix object with random values ranging from 0 to 10, rounded to zero decimal
places.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.FillRandom(System.Double,System.Double)">
      <summary>Fills the Matrix object with random values ranging from lower to upper bound, rounded to 0
decimal places.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.FillRandom(System.Double,System.Double,System.Int32)">
      <summary>Fills the Matrix object with random values ranging from lower bound to upper bound, rounded
to the specified number of decimal places.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.IsEqual(Bluebit.MatrixLibrary.Matrix)">
      <summary>Returns a value indicating whether this Matrix is equal to another matrix within a default
tolerance.</summary>
      <returns>
        <strong>true</strong> if <em>matrix</em> has the same size as this instance and its elements are equal with the elements of this instance within
the default tolerance; otherwise <strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.IsEqual(Bluebit.MatrixLibrary.Matrix,System.Double)">
      <summary>Returns a value indicating whether this Matrix is equal to another matrix within the
specified tolerance.</summary>
      <returns>
        <strong>true</strong> if <em>matrix</em> has the same size as this instance and its elements are equal with the elements of this instance within
the specified tolerance; otherwise <strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.IsSymmetric(System.Double)">
      <summary>Returns a value indicating whether this matrix is symmetric within the specified tolerance.</summary>
      <returns>
        <strong>true</strong> if current matrix is found to be symmetric; otherwise <strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.IsSymmetric">
      <summary>Returns a value indicating whether this matrix is symmetric.</summary>
      <returns>
        <strong>true</strong> if current matrix is found to be symmetric; otherwise <strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Multiply(System.Double,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.Matrix,System.Double,Bluebit.MatrixLibrary.Matrix)">
      <summary>
        <para>Computes a scalar-matrix-matrix product and adds the result to a scalar-matrix product. The operation is defined as:</para>
        <para>
          <em>C= alpha * op(A) * op(B) + beta *C</em>
        </para>
      </summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The inner dimensions of the matrices do not match.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Multiply(System.Double,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Vector,System.Double,Bluebit.MatrixLibrary.Vector)">
      <summary>
        <para>Computes a scalar-matrix-vector product and adds the result to a scalar-vector product. The operation is defined as:</para>
        <para>
          <em>y= alpha * op(A) * x + beta *y</em>
        </para>
      </summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The length of vector &lt;i&gt;x&lt;/i&gt; does not equal to the number of matrix columns &lt;/br&gt;&lt;i&gt;or&lt;/i&gt;&lt;/br&gt; the lenght of vector &lt;i&gt;y&lt;/i&gt; does not equal the number of matrix rows.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Multiply(System.Double,Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix,System.Double,Bluebit.MatrixLibrary.Matrix)">
      <summary>Computes a scalar-matrix-matrix product and adds the result to a scalar-matrix product.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The inner dimensions of the two matrices do not match.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Multiply(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Multiplies two matrices.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The inner dimensions of the two matrices do not match.</exception>
      <returns>A Matrix object that represents the result of the matrix multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Multiply(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Matrix)">
      <summary>Left multiplies a matrix with a vector.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The vector length does not equal to the number of the matrix rows.</exception>
      <returns>A Vector that represents the result of the vector-matrix multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Multiply(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Vector)">
      <summary>Multiplies a real matrix with a real vector.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The vector length does match with the number of the matrix columns.</exception>
      <returns>A CMatrix that represents the result of the matrix-vector multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Multiply(Bluebit.MatrixLibrary.Matrix,System.Double)">
      <summary>Returns the product of a scalar and a matrix.</summary>
      <returns>A Matrix object that represents the <em>matrix</em> - <em>scalar</em> product.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.PseudoInverse">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix.</summary>
      <returns>A Matrix object representing the Moore-Penrose inverse (pseudoinverse) of this matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.PseudoInverse(System.Double)">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix.</summary>
      <returns>A Matrix object representing the Moore-Penrose inverse (pseudoinverse) of this matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetColumn(System.Int32,Bluebit.MatrixLibrary.Vector)">
      <summary>Sets all elements of a matrix column using the contents on a vector.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;col&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetColumn(System.Int32,System.Double[])">
      <summary>Sets all elements of a matrix column using the content on an array.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;col&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetColumn(System.Int32,System.Double,System.Double)">
      <summary>Sets all elements of a matrix column to incremental values.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;col&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetColumn(System.Int32,System.Double)">
      <summary>Sets all elements of a matrix column to the specified value.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;col&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetRow(System.Int32,Bluebit.MatrixLibrary.Vector)">
      <summary>Sets all elements of a matrix row using the contents on a vector.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;row&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetRow(System.Int32,System.Double[])">
      <summary>Sets all elements of a matrix row using the content on an array.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;row&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetRow(System.Int32,System.Double,System.Double)">
      <summary>Sets all elements of a matrix row to incremental values.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;row&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SetRow(System.Int32,System.Double)">
      <summary>Sets all elements of a matrix row to the specified value.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;row&lt;/i&gt; exceeds matrix size.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortCols">
      <summary>Sorts the columns of the current matrix by the elements of its first row in ascending order.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortCols(System.Int32)">
      <summary>Sorts the columns of the current matrix by the elements of the specified row in ascending order.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortCols(System.Int32,Bluebit.MatrixLibrary.SortOrder)">
      <summary>Sorts the columns of the current matrix by the elements of the specified row in ascending or descending order.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortCols(System.Int32,Bluebit.MatrixLibrary.SortOrder,System.Int32[]@)">
      <summary>Sorts the columns of the current matrix by the elements of the specified row in ascending or descending order and returns the columns'
dispositions.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortRows">
      <summary>Sorts the rows of the current matrix by the elements of its first column in ascending order.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortRows(System.Int32)">
      <summary>Sorts the rows of the current matrix by the elements of the specified column in ascending order.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortRows(System.Int32,Bluebit.MatrixLibrary.SortOrder)">
      <summary>Sorts the rows of the current matrix by the elements of the specified column in ascending or descending order.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.SortRows(System.Int32,Bluebit.MatrixLibrary.SortOrder,System.Int32[]@)">
      <summary>Sorts the rows of the current matrix by the elements of the specified column in ascending or descending order and returns the rows' dispositions</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Times(Bluebit.MatrixLibrary.Matrix)">
      <summary>
        <para>Multiplies the current matrix by another matrix and returns the result.</para>
      </summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The inner dimentions of the two matrices do not match.</exception>
      <returns>A Matrix object that represents the result of the multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Times(Bluebit.MatrixLibrary.Vector)">
      <summary>Multiplies the current matrix by a vector and returns the result.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The &lt;i&gt;vector&lt;/i&gt; size does not match with the number of the current matrix columns.</exception>
      <returns>A Matrix that represents the result of the matrix-vector multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.Times(System.Double)">
      <summary>Multiplies the current matrix by a scalar value and returns the result.</summary>
      <returns>A Matrix object that represents the result of the matrix-scalar multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ToString">
      <summary>Converts this instance of Matrix to a formatted string using the default values for format
string, separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted <strong>string</strong>containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ToString(System.String)">
      <summary>Converts this instance of Matrix to a formatted string specifying a format string, and using
the default values for separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted <strong>string</strong> containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ToString(System.String,System.String)">
      <summary>Converts this instance of Matrix to a formatted string specifying a format string, and a
separator and using the default values for left and right borders and end of line characters.</summary>
      <returns>A formatted <strong>string</strong> containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ToString(System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of Matrix to a formatted string specifying a format string, a
separator, left and right borders and end of line characters.</summary>
      <returns>A formatted <strong>string</strong> containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ToString(System.IFormatProvider,System.String)">
      <summary>Converts this instance of Matrix to a formatted string specifying culture-specific format
information and a format string.</summary>
      <returns>A formatted <strong>string</strong>containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.ToString(System.IFormatProvider,System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of Matrix to a formatted string specifying culture-specific format
information, a format string, a separator, left and right borders and end of line characters.</summary>
      <returns>A formatted <strong>string</strong>containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.op_Addition(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Adds two matrices.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;A, B&lt;/i&gt; are not of the same size.</exception>
      <returns>A Matrix object that represents the result of the addition.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.op_Division">
      <summary>Performs matrix right division.</summary>
      <returns>A CMatrix object that represents the result of the matrix right division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.op_Equality(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Tests whether two Matrix objects represent equal matrices.</summary>
      <returns>
        <strong>true</strong> if matrices are equal; otherwise <strong>false.</strong></returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.op_Implicit~Bluebit.MatrixLibrary.Matrix">
      <summary>Defines conversions between Matrix objects and arrays of type
<strong>double</strong>.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.op_Inequality(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Tests whether two Matrix objects represent non equal matrices.</summary>
      <returns>
        <strong>true</strong> if matrices are not equal; otherwise <strong>false.</strong></returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.op_Multiply">
      <summary>Multiplies matrices.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.op_Subtraction(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Subtracts two matrices.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;A, B&lt;/i&gt; are not of the same size.</exception>
      <returns>A Matrix object that represents the result of the subtraction.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.op_UnaryNegation(Bluebit.MatrixLibrary.Matrix)">
      <summary>Negates the matrix.</summary>
      <returns>A Matrix object representing the negation of the matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.op_UnaryPlus(Bluebit.MatrixLibrary.Matrix)">
      <summary>Returns a copy of the matrix.</summary>
      <returns>A copy of the Matrix on the right of the unary plus operator.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.op_Division(System.Double,Bluebit.MatrixLibrary.Matrix)">
      <summary>Performs scalar-matrix division.</summary>
      <returns>A Matrix object that represents the result of the scalar-matrix division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.op_Division(Bluebit.MatrixLibrary.Matrix,System.Double)">
      <summary>Performs matrix-scalar division.</summary>
      <returns>A Matrix object that represents the result of the matrix-scalar division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.op_Division(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Performs matrix right division</summary>
      <exception caption="InvalidSizeException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.InvalidSizeException">&lt;I&gt;A, B&lt;/I&gt; do not have the same number of rows.</exception>
      <returns>A Matrix object that represents the result of the matrix division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.op_Implicit(System.Double[0:,0:])~Bluebit.MatrixLibrary.Matrix">
      <summary>Converts a two dimensional array of doubles to a Matrix object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.op_Implicit(Bluebit.MatrixLibrary.Matrix)~System.Double[0:,0:]">
      <summary>Converts a Matrix object to an array of doubles.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.op_Multiply(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Multiplies two matrices.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">Inner dimentions of matrices do not match.</exception>
      <returns>A Matrix object that represents the product.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.op_Multiply(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Matrix)">
      <summary>Left multiplies a matrix with a vector.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.op_Multiply(Bluebit.MatrixLibrary.Matrix,Bluebit.MatrixLibrary.Vector)">
      <summary>Multiplies a matrix by a vector.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">The &lt;i&gt;vector&lt;/i&gt; size does not match with the number of the &lt;i&gt;matrix&lt;/i&gt; columns.</exception>
      <returns>A CMatrix object that represents the product.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.op_Multiply(Bluebit.MatrixLibrary.Matrix,System.Double)">
      <summary>Multiplies a matrix by a scalar.</summary>
      <returns>A Matrix object that represents the product.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Matrix.op_Multiply(System.Double,Bluebit.MatrixLibrary.Matrix)">
      <summary>Multiplies a scalar by a matrix.</summary>
      <returns>A Matrix object that represents the matrix-scalar product.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.Cols">
      <summary>Gets or sets the number of columns of the current matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.Data">
      <summary>This property is used while serializing and deserializing the Matrix object and is not
intended to be used directly from your code.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.DataPtr">
      <summary>Gets the address of the unmanaged (native) memory block containing the matrix's elements.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.IsSquare">
      <summary>Indicates whether this instance represents a square matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.Item(System.Int32,System.Int32)">
      <summary>Gets or sets a single matrix element.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">Any of &lt;i&gt;row, col&lt;/i&gt; parameters exceeds matrix size.</exception>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Matrix.Rows">
      <summary>Gets or sets the number of rows of the current matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.MatrixException.#ctor">
      <summary>Creates a new instance of the MatrixException class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.MatrixException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the MatrixException class with the specified error
message and the underlying (inner) exception.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.MatrixException.#ctor(System.String)">
      <summary>Creates a new instance of the MatrixException class with the specified error
message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.MatrixException.#ctor">
      <summary>Creates a new instance of the MatrixException class with the default message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.MatrixException.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NmlConfiguration.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NmlConfiguration.FreeBuffers">
      <summary>Forces immediate release of temporary memory buffers which would normally be freed on application exit.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NmlConfiguration.GetMaxThreads">
      <summary>Returns the number of threads that <strong>NML</strong> is going to use.</summary>
      <returns>An <strong>integer</strong> value specifying the number of threads.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NmlConfiguration.SetNumThreads(System.Int32)">
      <summary>Suggests the number of threads that should be used.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.NmlConfiguration.DynamicThreads">
      <summary>Defines whether <strong>NML</strong> is allowed to dynamically change the number of threads used at runtime.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.NmlConfiguration.TotalMemory">
      <summary>Returns the total amount of unmanaged memory that is used by all objects of .NET Matrix Library.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NotEnoughMemoryException.#ctor">
      <summary>Creates a new instance of the NotEnoughMemoryException
class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NotEnoughMemoryException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the NotEnoughMemoryException class with the
specified error message and the underlying (inner) exception.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NotEnoughMemoryException.#ctor(System.String)">
      <summary>Creates a new instance of the NotEnoughMemoryException class with the
specified error message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NotEnoughMemoryException.#ctor">
      <summary>Creates a new instance of the NotEnoughMemoryException Class class with
the default message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NotSquareMatrixException.#ctor">
      <summary>Creates a new instance of the NotSquareMatrixException
class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NotSquareMatrixException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the NotSquareMatrixException class with the
specified message and the underlying (inner) exception.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NotSquareMatrixException.#ctor(System.String)">
      <summary>Creates a new instance of the NotSquareMatrixException class with the
specified message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.NotSquareMatrixException.#ctor">
      <summary>Creates a new instance of the NotSquareMatrixException class with the
default message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.OperationFailedException.#ctor">
      <summary>Creates a new instance of the OperationFailedException
class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.OperationFailedException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the OperationFailedException class with the
specified error message and the underlying (inner) exception.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.OperationFailedException.#ctor(System.String)">
      <summary>Creates a new instance of the OperationFailedException class with the
specified error message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.OperationFailedException.#ctor">
      <summary>Creates a new instance of the OperationFailedException class with the
default message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.QR.#ctor">
      <summary>Initializes a new instance of the QR class computing the <strong>QR</strong>
factorization of a general real matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.QR.#ctor(Bluebit.MatrixLibrary.Matrix,System.Boolean)">
      <summary>Initializes a new instance of the QR class computing the <strong>QR</strong> factorization of a
general real matrix, specifying whether column pivoting will be used.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.QR.#ctor(Bluebit.MatrixLibrary.Matrix)">
      <summary>Initializes a new instance of the QR class computing the <strong>QR</strong> factorization of a
real complex matrix using column pivoting.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.QR.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.QR.GetPivots">
      <summary>Gets an array of integers containing the pivot indices.</summary>
      <returns>An array of type <strong>integer</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.QR.Solve(Bluebit.MatrixLibrary.Matrix)">
      <summary>Solves a set of least-squares problems (with multiple right hands) using the <strong>QR</strong> factorization of a general real matrix.</summary>
      <returns>A Matrix object that contains the solution of the least-squares problems.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.QR.Cols">
      <summary>Gets the number of columns of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.QR.P">
      <summary>Gets the <strong>P</strong> factor, the permutation matrix of the <strong>QR</strong> factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.QR.Q">
      <summary>Gets the <strong>Q</strong> factor, the orthogonal part of the <strong>QR</strong> factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.QR.R">
      <summary>Gets the <strong>R</strong> factor, the upper triangular part of the <strong>QR</strong> factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.QR.Rows">
      <summary>Gets the number of rows of the matrix that is represented by the factorization.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SingularMatrixException.#ctor">
      <summary>Creates a new instance of the SingularMatrixException
class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SingularMatrixException.#ctor(System.String,System.Exception)">
      <summary>Constructs a new instance of the SingularMatrixException class with the
specified error message and the underlying (inner) exception.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SingularMatrixException.#ctor(System.String)">
      <summary>Creates a new instance of the SingularMatrixException class with the
specified message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SingularMatrixException.#ctor">
      <summary>Creates a new instance of the SingularMatrixException class with the
default message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SizeMismatchException.#ctor">
      <summary>Creates a new instance of the SizeMismatchException class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SizeMismatchException.#ctor(System.String,System.Exception)">
      <summary>Constructs a new instance of the SizeMismatchException class with the
specified error message and the underlying (inner) exception.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SizeMismatchException.#ctor(System.String)">
      <summary>Creates a new instance of the SizeMismatchException class with the specified
message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SizeMismatchException.#ctor">
      <summary>Creates a new instance of the SizeMismatchException class with the default
message.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor">
      <summary>Creates a new instance of the SparseMatrix class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor(Bluebit.MatrixLibrary.Matrix)">
      <summary>Creates a new instance of a SparseMatrix using the contents of a dense <see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.Matrix.html">Matrix</see> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor(Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Creates a new instance of a SparseMatrix copying the contents of another
<see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SparseMatrix">SparseMatrix</see>.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor(System.Double[],System.Int32[],System.Int32[])">
      <summary>Creates a new instance of a SparseMatrix from data in compressed sparse row (CSR)
format.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor(System.Int32,System.Boolean,System.Int32,System.Single)">
      <summary>Creates a new instance of SparseMatrix representing a square matrix of the specified
size, specifies whether the matrix is symmetric and sets initial values for the capacity and the grow factor.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor(System.Int32,System.Boolean)">
      <summary>Creates a new instance of SparseMatrix representing a square matrix of the specified
size, and specifies whether the matrix is symmetric.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor(System.Int32,System.Int32,System.Int32,System.Single)">
      <summary>Creates a new instance of a SparseMatrix with the specified number or rows and
columns, initial capacity and grow factor.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Creates a new instance of a SparseMatrix with the specified number or rows and columns
and initial capacity.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor(System.Int32,System.Int32)">
      <summary>Creates a new instance of a SparseMatrix with the specified number of rows and
columns.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.#ctor">
      <summary>Creates a new instance of an empty SparseMatrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Add">
      <summary>
        <para>Adds two sparse matrices.</para>
      </summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Clone">
      <summary>Creates a deep copy of the current sparse matrix.</summary>
      <returns>A new SparseMatrix object that contains the same data as this.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Equals(System.Object)">
      <summary>Returns a value indicating if this sparse matrix is equal to another sparse matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.FillRandom">
      <summary>Fills a sparse matrix with random values.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.GetHashCode">
      <summary>Returns a hash code value that represents this object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <strong>ISerializable</strong> interface and returns the data needed to serialize the
SparseMatrix class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.IsEqual">
      <summary>Returns a value indicating whether this instance of the SparseMatrix
object is equal to another instance.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Multiply">
      <summary>Multiplies sparse matrices.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Negate(Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Returns the negation of a sparse matrix.</summary>
      <returns>A SparseMatrix Class object representing the negation of the sparse matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Plus(Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Returns the current matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.RemoveZeros">
      <summary>Removes all elements which are close to zero from the internal storage.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Subtract(Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Subtracts a sparse matrix from another sparse matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.ToDense">
      <summary>Converts the current instance to a dense matrix.</summary>
      <returns>A Matrix object that represents the sparse matrix in dense format.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.ToString">
      <summary>Converts this instance of SparseMatrix to a formatted string.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Transpose">
      <summary>Returns the transpose of the sparse matrix.</summary>
      <returns>A SparseMatrix instance that represents the transpose of the current sparse matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Add(Bluebit.MatrixLibrary.SparseMatrix,System.Double,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>
        <para>Adds two sparse matrices. The operation is defined as:</para>
        <para>
          <em>C=A+beta*op(B)</em>
        </para>
      </summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Add(Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Adds two sparse matrices.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.FillRandom">
      <summary>Fills the SparseMatrix object with random values ranging from 1 to 10 using a density
of 1%.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.FillRandom(System.Double)">
      <summary>Fills the SparseMatrix object with random values ranging from 1 to 10 using the
specified density.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.FillRandom(System.Double,System.Double,System.Double)">
      <summary>Fills the SparseMatrix object with random values ranging from lower bound to upper
bound using the specified density.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.FillRandom(System.Double,System.Double,System.Double,System.Int32)">
      <summary>Fills the SparseMatrix object with random values ranging from lower bound to upper
bound, rounded to the specified number of decimal places, using the specified density.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.IsEqual(Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Returns a value indicating whether this instance of the SparseMatrix
object is equal to another instance within the default tolerance.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.IsEqual(Bluebit.MatrixLibrary.SparseMatrix,System.Double)">
      <summary>Returns a value indicating whether this instance of the SparseMatrix
object is equal to another instance within the specified tolerance.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Multiply(Bluebit.MatrixLibrary.SparseMatrix,System.Double)">
      <summary>Returns a scalar-matrix product.</summary>
      <returns>A SparseMatrix Class object containing the result.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Multiply(Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.Vector)">
      <summary>Multiplies a sparse matrix by a vector.</summary>
      <returns>A Vector object containing the result.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Multiply(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Left multiplies a sparse matrix by a vector.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~SizeMismatchException">The vector size does not match with the number of the matrix rows.</exception>
      <returns>A Vector object containing the result.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Multiply(Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Multiplies a sparse matrix by a dense matrix.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~SizeMismatchException">The inner dimensions of the two matrices do not match.</exception>
      <returns>A Matrix object that contains the result.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Multiply(Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Multiplies two sparse matrices and return the result into another sparse matrix.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~SizeMismatchException">The inner dimensions of the two matrices do not match.</exception>
      <returns>A SparseMatrix object containing the result.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Multiply(Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Multiplies two sparse matrices and return the result into another sparse matrix.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~SizeMismatchException">The inner dimensions of the two matrices do not match.</exception>
      <returns>A SparseMatrix object containing the result.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Multiply(System.Double,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.Vector,System.Double,Bluebit.MatrixLibrary.Vector)">
      <summary>
        <para>Computes a sparse matrix by a vector product and stores the result to another vector. The operation is defined as:</para>
        <para>
          <em>y=alpha*op(A)*B+beta*y</em>
        </para>
      </summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~SizeMismatchException">The length of vector &lt;i&gt;x&lt;/i&gt; does not equal to the number of matrix columns &lt;/br&gt;&lt;i&gt;or&lt;/i&gt;&lt;/br&gt; the lenght of vector &lt;i&gt;y&lt;/i&gt; does not equal the number of matrix rows.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.Multiply(System.Double,Bluebit.MatrixLibrary.TransposeMode,Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.Matrix,System.Double,Bluebit.MatrixLibrary.Matrix)">
      <summary>
        <para>Computes a sparse matrix by a dense matrix product and stores the result to another dense matrix. The operation is defined as:</para>
        <para>
          <em>C=alpha*op(A)*B+beta*C</em>
        </para>
      </summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~SizeMismatchException">The inner dimensions of the two matrices do not match.</exception>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.RemoveZeros">
      <summary>Removes all elements which are close to zero from the internal storage.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.RemoveZeros(System.Double)">
      <summary>Removes all elements with absolute value smaller than the specified tolerance.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.RemoveZeros(System.Double,System.Boolean)">
      <summary>Removes all elements which are equal to zero within the specified tolerance, specifying whether to remove the diagonal zero entries.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.ToString">
      <summary>Converts this instance of SparseMatrix to a formatted string using the default values
for format string, separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted <strong>string</strong>containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.ToString(System.String)">
      <summary>Converts this instance of SparseMatrix to a formatted string specifying a format
string, and using the default values for separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted <strong>string</strong>containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.ToString(System.String,System.String)">
      <summary>Converts this instance of SparseMatrix to a formatted string specifying a format
string, and a separator and using the default values for left and right borders and end of line characters.</summary>
      <returns>A formatted <strong>string</strong>containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.ToString(System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of SparseMatrix to a formatted string specifying a format
string, a separator, left and right borders and end of line characters.</summary>
      <returns>A formatted <strong>string</strong>containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.ToString(System.IFormatProvider,System.String)">
      <summary>Converts this instance of SparseMatrix to a formatted string specifying
culture-specific format information and a format string.</summary>
      <returns>A formatted <strong>string</strong>containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.ToString(System.IFormatProvider,System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of SparseMatrix to a formatted string specifying
culture-specific format information, a format string, a separator, left and right borders and end of line characters.</summary>
      <returns>A formatted <strong>string</strong>containing all matrix elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.op_Addition(Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Adds two sparse matrices.</summary>
      <returns>A SparseMatrix object that represents the result of the addition.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.op_Equality(Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Tests whether two SparseMatrix objects represent equal matrices.</summary>
      <returns>
        <strong>true</strong> if sparse matrices are equal; otherwise <strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.op_Inequality(Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Tests whether two SparseMatrix objects represent non equal matrices.</summary>
      <returns>
        <strong>true</strong> if matrices are not equal; <strong>false</strong> otherwise.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.op_Multiply">
      <summary>Multiplies a sparse matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.op_Subtraction(Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Subtracts a sparse matrix from another sparse matrix.</summary>
      <returns>A SparseMatrix object containing the result of the subtraction.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.op_UnaryNegation(Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Negates a matrix.</summary>
      <returns>A SparseMatrix representing the negation of the matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.op_UnaryPlus(Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Returns a copy of the sparse matrix.</summary>
      <returns>A copy of the SparseMatrix on the right side of the unary plus operator.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.op_Multiply(Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Multiplies two sparse matrices and result the result into another sparse matrix.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~SizeMismatchException">The inner dimensions of matrices do not match.</exception>
      <returns>A SparseMatrix object containing the matrix-matrix product.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.op_Multiply(Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.Matrix)">
      <summary>Multiplies a sparse matrix by a dense matrix and returns the result into a dense matrix.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~SizeMismatchException">The inner dimensions of matrices do not match.</exception>
      <returns>A Matrix object that contains the matrix-matrix product.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.op_Multiply(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Left multiplies a sparse matrix by a vector.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~SizeMismatchException">The vector size does not equal the number of matrix rows.</exception>
      <returns>A Vector object containing the result of the vector-matrix product.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.op_Multiply(Bluebit.MatrixLibrary.SparseMatrix,Bluebit.MatrixLibrary.Vector)">
      <summary>Multiplies a sparse matrix by a vector.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~SizeMismatchException">The vector size does not equal the number of matrix columns.</exception>
      <returns>A Vector object containing the result of the matrix-vector product.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.op_Multiply(System.Double,Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Multiplies a scalar by a sparse matrix.</summary>
      <returns>A SparseMatrix Class object that represents the matrix-scalar product.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseMatrix.op_Multiply(Bluebit.MatrixLibrary.SparseMatrix,System.Double)">
      <summary>Multiplies a sparse matrix by a scalar.</summary>
      <returns>A SparseMatrix Class object that represents the matrix-scalar product.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.Capacity">
      <summary>Gets or sets the number of elements that the internal storage of the sparse matrix can hold without resizing.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.Cols">
      <summary>Gets or sets the number of sparse matrix columns.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.Data">
      <summary>This property is used while serializing and deserializing the SparseMatrix and it is
not intended to be used in user code.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.GrowFactor">
      <summary>Gets or sets the number by which the Capacity is multiplied whenever a
greater internal storage for the matrix is needed.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.Item(System.Int32,System.Int32)">
      <summary>Gets or sets a single element of the sparse matrix.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary~IndexOutOfBoundsException">Any of &lt;i&gt;row, col&lt;/i&gt; parameters exceeds matrix size.</exception>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.NumElements">
      <summary>Gets the number of elements contained in the internal storage of the sparse matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.Rows">
      <summary>Gets or sets the number of sparse matrix rows.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseMatrix.Symmetric">
      <summary>Indicates whether this instance represents a symmetric sparse matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseSolver.#ctor(Bluebit.MatrixLibrary.SparseMatrix)">
      <summary>Creates an instance of the SparseSolver object for the specified sparse matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseSolver.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseSolver.Solve">
      <summary>Solves a system of linear equations</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseSolver.Solve(Bluebit.MatrixLibrary.Matrix)">
      <summary>Solves a system of linear equations for multiple right hands.</summary>
      <returns>A Matrix object that contains the solution of the system of linear
equations.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseSolver.Solve(Bluebit.MatrixLibrary.Vector)">
      <summary>Solves a system of linear equations for a single right hand vector.</summary>
      <returns>A Vector object containing the solution of the system of linear equations.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseSolver.FactorizationStrategy">
      <summary>Specifies the factorization strategy.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseSolver.FillInReducingMethod">
      <summary>Specifies the method to be used in order to reduce the fill in of the matrix factorization.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseSolver.MatrixType">
      <summary>Specifies the matrix type.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseSolver.PivotEpsilon">
      <summary>Specifies a value to be used as a pivot when a tiny pivot is encountered.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseSolver.RefinementSteps">
      <summary>Specifies the maximum number of the refinement steps to be used.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseSolver.Status">
      <summary>Returns the status of the solver.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseSolver.StoppingTolerance">
      <summary>Specifies the allowable tolerance of the computed solution.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseSVD.#ctor(Bluebit.MatrixLibrary.SparseMatrix,System.Int32,System.Double)">
      <summary>Creates a new instance of the <strong>SparseSVD</strong> class computing the specified number of singular values and singular vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SparseSVD.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseSVD.S">
      <summary>Returns a Matrix containing the computed singular values in its diagonal.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseSVD.U">
      <summary>Returns the computed left singular vectors.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SparseSVD.V">
      <summary>Returns the computed right singular vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.#ctor">
      <summary>Initializes a new instance of the SVD class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.#ctor(Bluebit.MatrixLibrary.Matrix,System.Boolean)">
      <summary>Initializes a new instance of the SVD class computing the singular value decomposition (SVD) of
a general complex matrix, specifying whether the singular vectors (<strong>U</strong> and <strong>V</strong> matrices) will be computed.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.#ctor(Bluebit.MatrixLibrary.Matrix)">
      <summary>Initializes a new instance of the SVD class computing the singular value decomposition (SVD) of
a general complex matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.PseudoInverse">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix that is represented by this singular value decomposition.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.Rank">
      <summary>Returns the matrix rank.</summary>
      <returns>An <strong>integer</strong> value representing the matrix rank.An <strong>integer</strong> value representing the matrix rank.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.PseudoInverse">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix that is represented by this singular value decomposition.</summary>
      <returns>A Matrix object representing the Moore-Penrose inverse of the factored matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.PseudoInverse(System.Double)">
      <summary>Returns the Moore-Penrose inverse (pseudoinverse) of the matrix that is represented by this singular value decomposition.</summary>
      <returns>A Matrix object representing the Moore-Penrose inverse of the factored matrix.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.Rank">
      <summary>Returns the matrix rank.</summary>
      <returns>An <strong>integer</strong>value representing the matrix rank.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SVD.Rank(System.Double)">
      <summary>Returns the matrix rank.</summary>
      <returns>An <strong>integer</strong> value representing the matrix rank.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SVD.S">
      <summary>Returns the <strong>Σ</strong> part of the singular value decomposition.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SVD.SingularValue(System.Int32)">
      <summary>Gets the specified singular value.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">The specified index is less than zero or greater than n-1 where n equals min(Rows,Cols).</exception>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SVD.SingularValues">
      <summary>Gets a vector containing all the computed singular values.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SVD.Succeeded">
      <summary>Indicates whether the all singular values were calculated successfully.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SVD.U">
      <summary>Returns the <strong>U</strong> part of the singular value decomposition.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SVD.V">
      <summary>Returns the <strong>V</strong> part of the singular value decomposition.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SVD.VH">
      <summary>Returns the transpose of the <strong>V</strong> part of the singular value decomposition.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SymEigen.#ctor">
      <summary>Initializes a new instance of the SymEigen class computing the eigen
decomposition of a real symmetric matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SymEigen.#ctor(Bluebit.MatrixLibrary.Matrix,System.Boolean)">
      <summary>Initializes a new instance of the SymEigen class computing the eigenvalues and optionally
the eigenvectors of a real symmetric matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SymEigen.#ctor(Bluebit.MatrixLibrary.Matrix)">
      <summary>Initializes a new instance of the SymEigen class computing the eigenvalues and the
eigenvectors of a real symmetric matrix.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.SymEigen.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SymEigen.D">
      <summary>Gets a real diagonal matrix, containing all the computed eigenvalues in its main diagonal.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SymEigen.Eigenvalue(System.Int32)">
      <summary>Gets the specified eigenvalue.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">The specified index is less than zero or greater than n-1 where n is the value returned by the Size property of this class.</exception>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SymEigen.Eigenvalues">
      <summary>Returns a vector containing all the computed eigenvalues.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SymEigen.Eigenvector(System.Int32)">
      <summary>Gets the specified eigenvector.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">The specified index is less than zero or greater than n-1 where n is the value returned by the Size property of this class.</exception>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SymEigen.Eigenvectors">
      <summary>Gets the eigenvectors matrix.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SymEigen.Size">
      <summary>Gets the size of matrix that is represented by this eigen decomposition.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.SymEigen.Succeeded">
      <summary>Indicates whether the eigenvalues-eigenvectors calculation succeeded to completion.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.#ctor">
      <summary>Initializes a new instance of the Vector class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.#ctor(System.Double[])">
      <summary>Initializes a new instance of the Vector class using the content of an array.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.#ctor(System.Int32,System.Double)">
      <summary>Creates a new instance of the Vector class specifying its length and a value to initialize
its components.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.#ctor(System.Int32)">
      <summary>Creates a new instance of the Vector class specifying its length.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.#ctor(Bluebit.MatrixLibrary.Vector)">
      <summary>Creates a new instance of the Vector class, copying the content of an existing vector.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.#ctor">
      <summary>Initializes a new instance of the Vector class creating a vector of length equal to 3.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.AbsSum">
      <summary>Returns the sum of magnitudes of the vector elements.</summary>
      <returns>A <strong>double</strong> value equal to the sum of magnitudes of the vector elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Add">
      <summary>Adds two vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ApplyFunction">
      <summary>Returns a new Vector object, whose elements are the result of applying the
specified <strong>double</strong> function to the elements of this vector.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Clear">
      <summary>Sets the value of all the CVector elements to zero.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Clone">
      <summary>Creates a duplicate of this Vector object.</summary>
      <returns>A new Vector object that contains the same data as this.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Dispose">
      <summary>Releases all the resources used by the <strong>%%ShortParentItemName%%</strong> object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Divide">
      <summary>Divides real vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.DotProduct">
      <summary>Returns the dot product of vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Equals(System.Object)">
      <summary>Returns a value indicating whether this Vector object is equal to another vector.</summary>
      <returns>
        <strong>true</strong> if <em>obj</em> is an instance of the Vector class and represents a
vector that has the same length as this instance and also all the elements of <em>obj</em> are equal to the elements of this instance; <strong>false</strong>
otherwise.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.FillRandom">
      <summary>Fills the Vector object with random values ranging from 0 to 10, rounded to
zero decimal places.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.GetHashCode">
      <summary>Returns a hash code value that represents this object.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the ISerializable interface and
returns the data needed to serialize the <see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.Vector">Vector</see> class.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.HasINFs">
      <summary>Returns a value indicating whether the current vector contains any elements that evaluate to <strong>negative</strong> or
<strong>positive</strong><strong>infinity</strong>.</summary>
      <returns>
        <strong>true</strong> if any of the vector elements evaluates to <strong>negative</strong> or <strong>positive infinity</strong>; otherwise
<strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.HasNaNs">
      <summary>Returns a value indicating whether the current vector contains any elements that evaluate to <strong>NaN</strong> values.</summary>
      <returns>
        <strong>true</strong> if any of the vector elements evaluates to a <strong>NaN</strong> value; otherwise <strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.IsFinite">
      <summary>Returns a value indicating whether the current vector contains any elements that evaluate either to <strong>NaN</strong> or to
<strong>negative</strong> or <strong>positive</strong><strong>infinity</strong>.</summary>
      <returns>
        <strong>true</strong> if all elements of the current vector have a value other <strong>NaN</strong>,
<strong>negative</strong><strong>infinity</strong>, <strong>positive</strong><strong>infinity</strong>; otherwise <strong>false</strong>.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Multiply">
      <summary>Multiplies vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Norm">
      <summary>Returns the Euclidean norm of the vector.</summary>
      <returns>A <strong>double</strong> equal to the Euclidean norm of the vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Normalize(Bluebit.MatrixLibrary.NormalizeMode)">
      <summary>Normalizes the current vector according to the specified mode.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Resize(System.Int32)">
      <summary>Resizes the vector preserving its content.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Subtract">
      <summary>Subtracts real vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Sum">
      <summary>Returns the sum of vector elements.</summary>
      <returns>A <strong>double</strong> equal to the sum of vector elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ToArray">
      <summary>Returns an array of type <strong>double</strong> containing the same values as the current vector.</summary>
      <returns>An array of type <strong>double</strong> containing the same values as the current vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ToMatrix">
      <summary>Converts current vector to a Matrix object.</summary>
      <returns>A one-column Matrix object containing the same values as this vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ToString">
      <summary>Converts this instance of Vector to a formatted string.</summary>
      <returns>A formatted <strong>string</strong> containing all vector elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Add(System.Double,Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Vector)">
      <summary>
        <para>Computes a vector-scalar product and adds the result to a vector. It is defined as:</para>
        <para style="MARGIN-RIGHT: 0px" dir="ltr">
          <em>y=A*x+y</em>
        </para>
      </summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Add(Bluebit.MatrixLibrary.Vector,System.Double)">
      <summary>Adds a vector with a scalar.</summary>
      <returns>A Vector object representing the result of the addition.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Add(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Vector)">
      <summary>Adds two vectors.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;x, y&lt;/i&gt; are not of the same length.</exception>
      <returns>A Vector object that represents the result of the addition.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction2Dbl2Int,System.Double,System.Int32)">
      <summary>Returns a new Vector object, whose elements are the result of applying the specified
<strong>double</strong> function to the element of this vector.</summary>
      <returns>A new Vector object with the same length as this vector, whose elements are the results of
applying the specified <em>function</em> to the elements of this vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction1Dbl2Int,System.Int32)">
      <summary>Returns a new Vector object, whose elements are the result of applying the specified
<strong>double</strong> function to the element of this vector.</summary>
      <returns>
        <para>A new Vector object with the same length as this vector, whose elements are the results of applying the
specified <em>function</em> to the elements of this vector.</para>
      </returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction1Dbl1Int,System.Int32)">
      <summary>Returns a new Vector object, whose elements are the result of applying the specified
<strong>double</strong> function to the element of this vector.</summary>
      <returns>A new Vector object with the same length as this vector, whose elements are the results of
applying the specified <em>function</em> to the elements of this vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction2Dbl,System.Double)">
      <summary>Returns a new Vector object, whose elements are the result of applying the specified
<strong>double</strong> function to the element of this vector.</summary>
      <returns>A new Vector object with the same length as this vector, whose elements are the results of
applying the specified <em>function</em> to the elements of this vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ApplyFunction(Bluebit.MatrixLibrary.DoubleFunction1Dbl)">
      <summary>Returns a new Vector object, whose elements are the result of applying the specified
<strong>double</strong> function to the element of this vector.</summary>
      <returns>A new Vector object with the same length as this vector, whose elements are the results of
applying the specified <em>function</em> to the elements of this vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Divide(System.Double,Bluebit.MatrixLibrary.Vector)">
      <summary>Divides a scalar by a real vector.</summary>
      <returns>A Vector object representing the result of the scalar-vector division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Divide(Bluebit.MatrixLibrary.Vector,System.Double)">
      <summary>Divides a real vector by a scalar.</summary>
      <returns>A Vector object representing the result of the vector-scalar division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Divide(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Vector)">
      <summary>Divides two real vectors.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;x, y&lt;/i&gt; are not of the same length.</exception>
      <returns>A Vector object representing the result of the vector-vector division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.DotProduct(Bluebit.MatrixLibrary.Vector)">
      <summary>Returns the dot product of this vector with another vector.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">Vectors are not of the same size.</exception>
      <returns>A <strong>double</strong> representing the dot product of this vector with the specified vector.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.DotProduct(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Vector)">
      <summary>Returns the dot product of two complex vectors.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">Vectors are not of the same size.</exception>
      <returns>A <strong>double</strong> representing the dot product of the two vectors.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.FillRandom">
      <summary>Fills the Vector object with random values ranging from 0 to 10, rounded to zero decimal
places.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.FillRandom(System.Double,System.Double)">
      <summary>Fills the Vector object with random values ranging from lower to upper bound, rounded to 0
decimal places.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.FillRandom(System.Double,System.Double,System.Int32)">
      <summary>Fills the Vector object with random values ranging from lower bound to upper bound, rounded
to the specified number of decimal places.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Multiply(Bluebit.MatrixLibrary.Vector,System.Double)">
      <summary>Multiplies a vector by a scalar.</summary>
      <returns>A Vector object representing the result of the vector-scalar multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Multiply(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Vector)">
      <summary>Multiplies two vectors.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;x, y&lt;/i&gt; are not of the same length.</exception>
      <returns>A Vector object that represents the result of the multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Subtract(System.Double,Bluebit.MatrixLibrary.Vector)">
      <summary>Subtracts a real vector from a scalar.</summary>
      <returns>A Vector object representing the result of the subtraction.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Subtract(Bluebit.MatrixLibrary.Vector,System.Double)">
      <summary>Subtracts a scalar from a vector.</summary>
      <returns>A Vector object representing the result of the subtraction.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.Subtract(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Vector)">
      <summary>Subtracts a vector from another vector.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;x, y&lt;/i&gt; are not of the same length.</exception>
      <returns>A Vector object representing the result of the subtraction.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ToString">
      <summary>Converts this instance of Vector to a formatted string using the default values for format
string, separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted <strong>string</strong>containing all vector elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ToString(System.String)">
      <summary>Converts this instance of Vector to a formatted string specifying a format string, and using
the default values for separator, left and right borders, and end of line characters.</summary>
      <returns>A formatted <strong>string</strong> containing all vector elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ToString(System.String,System.String)">
      <summary>Converts this instance of Vector to a formatted string specifying a format string, and a
separator and using the default values for left and right borders and end of line characters.</summary>
      <returns>A formatted <strong>string</strong> containing all vector elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ToString(System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of Vector to a formatted string specifying a format string, a
separator, left and right borders and end of line characters.</summary>
      <returns>A formatted <strong>string</strong> containing all vector elements.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ToString(System.IFormatProvider,System.String)">
      <summary>Converts this instance of <strong>%%ShortParentItemName%%</strong> to a formatted string specifying culture-specific format information and a
format string.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.ToString(System.IFormatProvider,System.String,System.String,System.String,System.String,System.String)">
      <summary>Converts this instance of <strong>%%ShortParentItemName%%</strong> to a formatted string specifying culture-specific format information, a format
string, a separator, left and right borders and end of line characters.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Addition">
      <summary>Adds real vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Division">
      <summary>Divides real vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Equality(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Vector)">
      <summary>Tests whether two Vector objects represent equal vectors.</summary>
      <returns>
        <strong>true</strong> if vectors are equal; otherwise <strong>false.</strong></returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Implicit~Bluebit.MatrixLibrary.Vector">
      <summary>Defines conversions between Vector objects and arrays of type
<strong>double</strong>.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Inequality(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Vector)">
      <summary>Tests whether two Vector objects represent non equal vectors.</summary>
      <returns>
        <strong>true</strong> if vectors are not equal; otherwise <strong>false.</strong></returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Multiply">
      <summary>Multiplies real vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Subtraction">
      <summary>Subtracts real vectors.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Addition(System.Double,Bluebit.MatrixLibrary.Vector)">
      <summary>Adds a scalar and a real vector.</summary>
      <returns>A Vector object representing the result of the addition.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Addition(Bluebit.MatrixLibrary.Vector,System.Double)">
      <summary>Adds a real vector and a scalar.</summary>
      <returns>A Vector object representing the result of the addition.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Addition(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Vector)">
      <summary>Adds two real vectors.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;x, y&lt;/i&gt; are not of the same length.</exception>
      <returns>A Vector object representing the result of the addition.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Division(System.Double,Bluebit.MatrixLibrary.Vector)">
      <summary>Divides a scalar by a real vector.</summary>
      <returns>A Vector object representing the result of the scalar-vector division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Division(Bluebit.MatrixLibrary.Vector,System.Double)">
      <summary>Divides a real vector by a scalar.</summary>
      <returns>A CVector object representing the result of the vector-scalar division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Division(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Vector)">
      <summary>Divides two real vectors.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;x, y&lt;/i&gt; are not of the same length.</exception>
      <returns>A CVector object representing the result of the vector-vector division.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Implicit(System.Double[])~Bluebit.MatrixLibrary.Vector">
      <summary>Converts an array of type <strong>double</strong> to a Vector object.</summary>
      <returns>A Vector object.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Implicit(Bluebit.MatrixLibrary.Vector)~System.Double[0:,0:]">
      <summary>Converts a Vector to an array of type double.</summary>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Implicit(Bluebit.MatrixLibrary.Vector)~Bluebit.MatrixLibrary.Matrix">
      <summary>Converts a Vector object to a <see cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.Matrix">Matrix
Class</see> object.</summary>
      <returns>A Matrix object.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Multiply(System.Double,Bluebit.MatrixLibrary.Vector)">
      <summary>Multiplies a scalar by a real vector.</summary>
      <returns>A Vector object representing the result of the multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Multiply(Bluebit.MatrixLibrary.Vector,System.Double)">
      <summary>Multiplies a real vector by a scalar.</summary>
      <returns>A Vector object representing the result of the multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Multiply(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Vector)">
      <summary>Multiplies two real vectors.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;x, y&lt;/i&gt; are not of the same length.</exception>
      <returns>A Vector object representing the result of the multiplication.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Subtraction(System.Double,Bluebit.MatrixLibrary.Vector)">
      <summary>Subtracts a real vector from a scalar.</summary>
      <returns>A Vector object representing the result of the subtraction.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Subtraction(Bluebit.MatrixLibrary.Vector,System.Double)">
      <summary>Subtracts a scalar from a real vector.</summary>
      <returns>A Vector object representing the result of the subtraction.</returns>
    </member>
    <member name="M:Bluebit.MatrixLibrary.Vector.op_Subtraction(Bluebit.MatrixLibrary.Vector,Bluebit.MatrixLibrary.Vector)">
      <summary>Subtracts a vector from another vector.</summary>
      <exception caption="SizeMismatchException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.SizeMismatchException">&lt;i&gt;x, y&lt;/i&gt; are not of the same length.</exception>
      <returns>A Vector instance on the left of the subtraction operator.</returns>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.Data">
      <summary>This property is used while serializing and deserializing the Vector object and is not
intended to be used directly from your code.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.DataPtr">
      <summary>Gets the address of the unmanaged (native) memory block containing the vector's elements.</summary>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.Item(System.Int32)">
      <summary>Gets or sets a single vector element.</summary>
      <exception caption="IndexOutOfBoundsException" cref="Bluebit.MatrixLibrary~Bluebit.MatrixLibrary.IndexOutOfBoundsException">&lt;i&gt;index&lt;/i&gt; exceeds vector length.</exception>
    </member>
    <member name="P:Bluebit.MatrixLibrary.Vector.Length">
      <summary>Gets or sets the vector length.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.ComplexFunction1Cmp">
      <summary>A delegate to a method that takes one complex as a parameter and returns a complex</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.ComplexFunction1Cmp1Int">
      <summary>A delegate to a method that takes one complex and one <strong>integer</strong> parameter and returns a complex</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.ComplexFunction1Cmp2Int">
      <summary>A delegate to a method that takes one complex and two <strong>integer</strong> parameters and returns a complex</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.ComplexFunction2Cmp">
      <summary>A delegate to a method that takes two complex parameters and returns a complex</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.ComplexFunction2Cmp2Int">
      <summary>A delegate to a method that takes two complex and two <strong>integer</strong> parameters and returns a complex</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.DoubleFunction1Dbl">
      <summary>A delegate to a method that takes one <strong>double</strong> parameter and returns a <strong>double</strong>.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.DoubleFunction1Dbl1Int">
      <summary>A delegate to a method that takes one <strong>double</strong> and one <strong>integer</strong> parameter and returns a <strong>double</strong>.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.DoubleFunction1Dbl2Int">
      <summary>A delegate to a method that takes one <strong>double</strong> and two <strong>integer</strong> parameters and returns a <strong>double</strong>.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.DoubleFunction2Dbl">
      <summary>A delegate to a method that takes two <strong>double</strong> parameters and returns a <strong>double</strong>.</summary>
    </member>
    <member name="T:Bluebit.MatrixLibrary.DoubleFunction2Dbl2Int">
      <summary>A delegate to a method that takes two <strong>double</strong> and two <strong>integer</strong> parameters and returns a <strong>double</strong>.</summary>
    </member>
  </members>
</doc>